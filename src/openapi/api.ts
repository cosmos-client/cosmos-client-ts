/* tslint:disable */
/* eslint-disable */
/**
 * Cosmos SDK - gRPC Gateway docs
 * A REST interface for state queries
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Consensus captures the consensus rules for processing a block in the blockchain, including all blockchain data structures and the rules of the application\'s state transition machine.
 * @export
 * @interface BasicBlockInfo
 */
export interface BasicBlockInfo {
    /**
     * 
     * @type {string}
     * @memberof BasicBlockInfo
     */
    'block'?: string;
    /**
     * 
     * @type {string}
     * @memberof BasicBlockInfo
     */
    'app'?: string;
}
/**
 * CompactBitArray is an implementation of a space efficient bit array. This is used to ensure that the encoded data takes up a minimal amount of space after proto encoding. This is not thread safe, and is not intended for concurrent usage.
 * @export
 * @interface BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning
 */
export interface BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning {
    /**
     * 
     * @type {number}
     * @memberof BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning
     */
    'extra_bits_stored'?: number;
    /**
     * 
     * @type {string}
     * @memberof BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning
     */
    'elems'?: string;
}
/**
 * 
 * @export
 * @interface BlockID
 */
export interface BlockID {
    /**
     * 
     * @type {string}
     * @memberof BlockID
     */
    'hash'?: string;
    /**
     * 
     * @type {PartsetHeader}
     * @memberof BlockID
     */
    'part_set_header'?: PartsetHeader;
}
/**
 * TxBody is the body of a transaction that all signers sign over.
 * @export
 * @interface BodyIsTheProcessableContentOfTheTransaction
 */
export interface BodyIsTheProcessableContentOfTheTransaction {
    /**
     * messages is a list of messages to be executed. The required signers of those messages define the number and order of elements in AuthInfo\'s signer_infos and Tx\'s signatures. Each required signer address is added to the list only the first time it occurs. By convention, the first required signer (usually from the first message) is referred to as the primary signer and pays the fee for the whole transaction.
     * @type {Array<InlineResponse200Accounts>}
     * @memberof BodyIsTheProcessableContentOfTheTransaction
     */
    'messages'?: Array<InlineResponse200Accounts>;
    /**
     * memo is any arbitrary note/comment to be added to the transaction. WARNING: in clients, any publicly exposed text should not be called memo, but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).
     * @type {string}
     * @memberof BodyIsTheProcessableContentOfTheTransaction
     */
    'memo'?: string;
    /**
     * 
     * @type {string}
     * @memberof BodyIsTheProcessableContentOfTheTransaction
     */
    'timeout_height'?: string;
    /**
     * 
     * @type {Array<InlineResponse200Accounts>}
     * @memberof BodyIsTheProcessableContentOfTheTransaction
     */
    'extension_options'?: Array<InlineResponse200Accounts>;
    /**
     * 
     * @type {Array<InlineResponse200Accounts>}
     * @memberof BodyIsTheProcessableContentOfTheTransaction
     */
    'non_critical_extension_options'?: Array<InlineResponse200Accounts>;
}
/**
 * Params defines the parameters for the auth module.
 * @export
 * @interface CosmosAuthV1beta1Params
 */
export interface CosmosAuthV1beta1Params {
    /**
     * 
     * @type {string}
     * @memberof CosmosAuthV1beta1Params
     */
    'max_memo_characters'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosAuthV1beta1Params
     */
    'tx_sig_limit'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosAuthV1beta1Params
     */
    'tx_size_cost_per_byte'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosAuthV1beta1Params
     */
    'sig_verify_cost_ed25519'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosAuthV1beta1Params
     */
    'sig_verify_cost_secp256k1'?: string;
}
/**
 * QueryAccountResponse is the response type for the Query/Account RPC method.
 * @export
 * @interface CosmosAuthV1beta1QueryAccountResponse
 */
export interface CosmosAuthV1beta1QueryAccountResponse {
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof CosmosAuthV1beta1QueryAccountResponse
     */
    'account'?: InlineResponse200Accounts;
}
/**
 * QueryAccountsResponse is the response type for the Query/Accounts RPC method.
 * @export
 * @interface CosmosAuthV1beta1QueryAccountsResponse
 */
export interface CosmosAuthV1beta1QueryAccountsResponse {
    /**
     * 
     * @type {Array<InlineResponse200Accounts>}
     * @memberof CosmosAuthV1beta1QueryAccountsResponse
     */
    'accounts'?: Array<InlineResponse200Accounts>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosAuthV1beta1QueryAccountsResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface CosmosAuthV1beta1QueryParamsResponse
 */
export interface CosmosAuthV1beta1QueryParamsResponse {
    /**
     * 
     * @type {InlineResponse2002Params}
     * @memberof CosmosAuthV1beta1QueryParamsResponse
     */
    'params'?: InlineResponse2002Params;
}
/**
 * Grant gives permissions to execute the provide method with expiration time.
 * @export
 * @interface CosmosAuthzV1beta1Grant
 */
export interface CosmosAuthzV1beta1Grant {
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof CosmosAuthzV1beta1Grant
     */
    'authorization'?: InlineResponse200Accounts;
    /**
     * 
     * @type {string}
     * @memberof CosmosAuthzV1beta1Grant
     */
    'expiration'?: string;
}
/**
 * QueryGrantsResponse is the response type for the Query/Authorizations RPC method.
 * @export
 * @interface CosmosAuthzV1beta1QueryGrantsResponse
 */
export interface CosmosAuthzV1beta1QueryGrantsResponse {
    /**
     * authorizations is a list of grants granted for grantee by granter.
     * @type {Array<InlineResponse20055Grants>}
     * @memberof CosmosAuthzV1beta1QueryGrantsResponse
     */
    'grants'?: Array<InlineResponse20055Grants>;
    /**
     * 
     * @type {InlineResponse20014Pagination}
     * @memberof CosmosAuthzV1beta1QueryGrantsResponse
     */
    'pagination'?: InlineResponse20014Pagination;
}
/**
 * DenomOwner defines structure representing an account that owns or holds a particular denominated token. It contains the account address and account balance of the denominated token.
 * @export
 * @interface CosmosBankV1beta1DenomOwner
 */
export interface CosmosBankV1beta1DenomOwner {
    /**
     * address defines the address that owns a particular denomination.
     * @type {string}
     * @memberof CosmosBankV1beta1DenomOwner
     */
    'address'?: string;
    /**
     * 
     * @type {InlineResponse2003Balances}
     * @memberof CosmosBankV1beta1DenomOwner
     */
    'balance'?: InlineResponse2003Balances;
}
/**
 * DenomUnit represents a struct that describes a given denomination unit of the basic token.
 * @export
 * @interface CosmosBankV1beta1DenomUnit
 */
export interface CosmosBankV1beta1DenomUnit {
    /**
     * denom represents the string name of the given denom unit (e.g uatom).
     * @type {string}
     * @memberof CosmosBankV1beta1DenomUnit
     */
    'denom'?: string;
    /**
     * exponent represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit\'s denom 1 denom = 1^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of \'atom\' with exponent = 6, thus: 1 atom = 10^6 uatom).
     * @type {number}
     * @memberof CosmosBankV1beta1DenomUnit
     */
    'exponent'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof CosmosBankV1beta1DenomUnit
     */
    'aliases'?: Array<string>;
}
/**
 * Metadata represents a struct that describes a basic token.
 * @export
 * @interface CosmosBankV1beta1Metadata
 */
export interface CosmosBankV1beta1Metadata {
    /**
     * 
     * @type {string}
     * @memberof CosmosBankV1beta1Metadata
     */
    'description'?: string;
    /**
     * 
     * @type {Array<InlineResponse2006DenomUnits>}
     * @memberof CosmosBankV1beta1Metadata
     */
    'denom_units'?: Array<InlineResponse2006DenomUnits>;
    /**
     * base represents the base denom (should be the DenomUnit with exponent = 0).
     * @type {string}
     * @memberof CosmosBankV1beta1Metadata
     */
    'base'?: string;
    /**
     * display indicates the suggested denom that should be displayed in clients.
     * @type {string}
     * @memberof CosmosBankV1beta1Metadata
     */
    'display'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBankV1beta1Metadata
     */
    'name'?: string;
    /**
     * symbol is the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display.
     * @type {string}
     * @memberof CosmosBankV1beta1Metadata
     */
    'symbol'?: string;
    /**
     * URI to a document (on or off-chain) that contains additional information. Optional.
     * @type {string}
     * @memberof CosmosBankV1beta1Metadata
     */
    'uri'?: string;
    /**
     * URIHash is a sha256 hash of a document pointed by URI. It\'s used to verify that the document didn\'t change. Optional.
     * @type {string}
     * @memberof CosmosBankV1beta1Metadata
     */
    'uri_hash'?: string;
}
/**
 * Params defines the parameters for the bank module.
 * @export
 * @interface CosmosBankV1beta1Params
 */
export interface CosmosBankV1beta1Params {
    /**
     * 
     * @type {Array<InlineResponse2008ParamsSendEnabled>}
     * @memberof CosmosBankV1beta1Params
     */
    'send_enabled'?: Array<InlineResponse2008ParamsSendEnabled>;
    /**
     * 
     * @type {boolean}
     * @memberof CosmosBankV1beta1Params
     */
    'default_send_enabled'?: boolean;
}
/**
 * QueryAllBalancesResponse is the response type for the Query/AllBalances RPC method.
 * @export
 * @interface CosmosBankV1beta1QueryAllBalancesResponse
 */
export interface CosmosBankV1beta1QueryAllBalancesResponse {
    /**
     * balances is the balances of all the coins.
     * @type {Array<InlineResponse2003Balances>}
     * @memberof CosmosBankV1beta1QueryAllBalancesResponse
     */
    'balances'?: Array<InlineResponse2003Balances>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosBankV1beta1QueryAllBalancesResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method.
 * @export
 * @interface CosmosBankV1beta1QueryBalanceResponse
 */
export interface CosmosBankV1beta1QueryBalanceResponse {
    /**
     * 
     * @type {InlineResponse2003Balances}
     * @memberof CosmosBankV1beta1QueryBalanceResponse
     */
    'balance'?: InlineResponse2003Balances;
}
/**
 * QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC method.
 * @export
 * @interface CosmosBankV1beta1QueryDenomMetadataResponse
 */
export interface CosmosBankV1beta1QueryDenomMetadataResponse {
    /**
     * 
     * @type {InlineResponse2006Metadatas}
     * @memberof CosmosBankV1beta1QueryDenomMetadataResponse
     */
    'metadata'?: InlineResponse2006Metadatas;
}
/**
 * QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query.
 * @export
 * @interface CosmosBankV1beta1QueryDenomOwnersResponse
 */
export interface CosmosBankV1beta1QueryDenomOwnersResponse {
    /**
     * 
     * @type {Array<InlineResponse2005DenomOwners>}
     * @memberof CosmosBankV1beta1QueryDenomOwnersResponse
     */
    'denom_owners'?: Array<InlineResponse2005DenomOwners>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosBankV1beta1QueryDenomOwnersResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC method.
 * @export
 * @interface CosmosBankV1beta1QueryDenomsMetadataResponse
 */
export interface CosmosBankV1beta1QueryDenomsMetadataResponse {
    /**
     * metadata provides the client information for all the registered tokens.
     * @type {Array<InlineResponse2006Metadatas>}
     * @memberof CosmosBankV1beta1QueryDenomsMetadataResponse
     */
    'metadatas'?: Array<InlineResponse2006Metadatas>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosBankV1beta1QueryDenomsMetadataResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryParamsResponse defines the response type for querying x/bank parameters.
 * @export
 * @interface CosmosBankV1beta1QueryParamsResponse
 */
export interface CosmosBankV1beta1QueryParamsResponse {
    /**
     * 
     * @type {InlineResponse2008Params}
     * @memberof CosmosBankV1beta1QueryParamsResponse
     */
    'params'?: InlineResponse2008Params;
}
/**
 * QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
 * @export
 * @interface CosmosBankV1beta1QuerySupplyOfResponse
 */
export interface CosmosBankV1beta1QuerySupplyOfResponse {
    /**
     * 
     * @type {InlineResponse2003Balances}
     * @memberof CosmosBankV1beta1QuerySupplyOfResponse
     */
    'amount'?: InlineResponse2003Balances;
}
/**
 * 
 * @export
 * @interface CosmosBankV1beta1QueryTotalSupplyResponse
 */
export interface CosmosBankV1beta1QueryTotalSupplyResponse {
    /**
     * 
     * @type {Array<InlineResponse2003Balances>}
     * @memberof CosmosBankV1beta1QueryTotalSupplyResponse
     */
    'supply'?: Array<InlineResponse2003Balances>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosBankV1beta1QueryTotalSupplyResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * SendEnabled maps coin denom to a send_enabled status (whether a denom is sendable).
 * @export
 * @interface CosmosBankV1beta1SendEnabled
 */
export interface CosmosBankV1beta1SendEnabled {
    /**
     * 
     * @type {string}
     * @memberof CosmosBankV1beta1SendEnabled
     */
    'denom'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CosmosBankV1beta1SendEnabled
     */
    'enabled'?: boolean;
}
/**
 * ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
 * @export
 * @interface CosmosBaseAbciV1beta1ABCIMessageLog
 */
export interface CosmosBaseAbciV1beta1ABCIMessageLog {
    /**
     * 
     * @type {number}
     * @memberof CosmosBaseAbciV1beta1ABCIMessageLog
     */
    'msg_index'?: number;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1ABCIMessageLog
     */
    'log'?: string;
    /**
     * Events contains a slice of Event objects that were emitted during some execution.
     * @type {Array<InlineResponse20050TxResponseEvents>}
     * @memberof CosmosBaseAbciV1beta1ABCIMessageLog
     */
    'events'?: Array<InlineResponse20050TxResponseEvents>;
}
/**
 * Attribute defines an attribute wrapper where the key and value are strings instead of raw bytes.
 * @export
 * @interface CosmosBaseAbciV1beta1Attribute
 */
export interface CosmosBaseAbciV1beta1Attribute {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1Attribute
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1Attribute
     */
    'value'?: string;
}
/**
 * GasInfo defines tx execution gas context.
 * @export
 * @interface CosmosBaseAbciV1beta1GasInfo
 */
export interface CosmosBaseAbciV1beta1GasInfo {
    /**
     * GasWanted is the maximum units of work we allow this tx to perform.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1GasInfo
     */
    'gas_wanted'?: string;
    /**
     * GasUsed is the amount of gas actually consumed.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1GasInfo
     */
    'gas_used'?: string;
}
/**
 * Result is the union of ResponseFormat and ResponseCheckTx.
 * @export
 * @interface CosmosBaseAbciV1beta1Result
 */
export interface CosmosBaseAbciV1beta1Result {
    /**
     * Data is any data returned from message or handler execution. It MUST be length prefixed in order to separate data from multiple message executions.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1Result
     */
    'data'?: string;
    /**
     * Log contains the log information from message or handler execution.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1Result
     */
    'log'?: string;
    /**
     * Events contains a slice of Event objects that were emitted during message or handler execution.
     * @type {Array<InlineResponse20049ResultEvents>}
     * @memberof CosmosBaseAbciV1beta1Result
     */
    'events'?: Array<InlineResponse20049ResultEvents>;
}
/**
 * StringEvent defines en Event object wrapper where all the attributes contain key/value pairs that are strings instead of raw bytes.
 * @export
 * @interface CosmosBaseAbciV1beta1StringEvent
 */
export interface CosmosBaseAbciV1beta1StringEvent {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1StringEvent
     */
    'type'?: string;
    /**
     * 
     * @type {Array<InlineResponse20050TxResponseAttributes>}
     * @memberof CosmosBaseAbciV1beta1StringEvent
     */
    'attributes'?: Array<InlineResponse20050TxResponseAttributes>;
}
/**
 * TxResponse defines a structure containing relevant tx data and metadata. The tags are stringified and the log is JSON decoded.
 * @export
 * @interface CosmosBaseAbciV1beta1TxResponse
 */
export interface CosmosBaseAbciV1beta1TxResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'height'?: string;
    /**
     * The transaction hash.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'txhash'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'codespace'?: string;
    /**
     * Response code.
     * @type {number}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'code'?: number;
    /**
     * Result bytes, if any.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'data'?: string;
    /**
     * The output of the application\'s logger (raw string). May be non-deterministic.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'raw_log'?: string;
    /**
     * The output of the application\'s logger (typed). May be non-deterministic.
     * @type {Array<InlineResponse20050TxResponseLogs>}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'logs'?: Array<InlineResponse20050TxResponseLogs>;
    /**
     * Additional information. May be non-deterministic.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'info'?: string;
    /**
     * Amount of gas requested for transaction.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'gas_wanted'?: string;
    /**
     * Amount of gas consumed by transaction.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'gas_used'?: string;
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'tx'?: InlineResponse200Accounts;
    /**
     * Time of the previous block. For heights > 1, it\'s the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it\'s genesis time.
     * @type {string}
     * @memberof CosmosBaseAbciV1beta1TxResponse
     */
    'timestamp'?: string;
}
/**
 * message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }
 * @export
 * @interface CosmosBaseQueryV1beta1PageRequest
 */
export interface CosmosBaseQueryV1beta1PageRequest {
    /**
     * key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'key'?: string;
    /**
     * offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'offset'?: string;
    /**
     * limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'limit'?: string;
    /**
     * count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @type {boolean}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'count_total'?: boolean;
    /**
     * reverse is set to true if results are to be returned in the descending order.
     * @type {boolean}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'reverse'?: boolean;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.   message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }
 * @export
 * @interface CosmosBaseQueryV1beta1PageResponse
 */
export interface CosmosBaseQueryV1beta1PageResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageResponse
     */
    'next_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageResponse
     */
    'total'?: string;
}
/**
 * GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetBlockByHeightResponse
 */
export interface CosmosBaseTendermintV1beta1GetBlockByHeightResponse {
    /**
     * 
     * @type {BlockID}
     * @memberof CosmosBaseTendermintV1beta1GetBlockByHeightResponse
     */
    'block_id'?: BlockID;
    /**
     * 
     * @type {InlineResponse20010Block}
     * @memberof CosmosBaseTendermintV1beta1GetBlockByHeightResponse
     */
    'block'?: InlineResponse20010Block;
}
/**
 * GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetLatestBlockResponse
 */
export interface CosmosBaseTendermintV1beta1GetLatestBlockResponse {
    /**
     * 
     * @type {BlockID}
     * @memberof CosmosBaseTendermintV1beta1GetLatestBlockResponse
     */
    'block_id'?: BlockID;
    /**
     * 
     * @type {InlineResponse20010Block}
     * @memberof CosmosBaseTendermintV1beta1GetLatestBlockResponse
     */
    'block'?: InlineResponse20010Block;
}
/**
 * GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetLatestValidatorSetResponse
 */
export interface CosmosBaseTendermintV1beta1GetLatestValidatorSetResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1GetLatestValidatorSetResponse
     */
    'block_height'?: string;
    /**
     * 
     * @type {Array<InlineResponse20014Validators>}
     * @memberof CosmosBaseTendermintV1beta1GetLatestValidatorSetResponse
     */
    'validators'?: Array<InlineResponse20014Validators>;
    /**
     * 
     * @type {InlineResponse20014Pagination}
     * @memberof CosmosBaseTendermintV1beta1GetLatestValidatorSetResponse
     */
    'pagination'?: InlineResponse20014Pagination;
}
/**
 * GetNodeInfoResponse is the request type for the Query/GetNodeInfo RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetNodeInfoResponse
 */
export interface CosmosBaseTendermintV1beta1GetNodeInfoResponse {
    /**
     * 
     * @type {InlineResponse20012DefaultNodeInfo}
     * @memberof CosmosBaseTendermintV1beta1GetNodeInfoResponse
     */
    'default_node_info'?: InlineResponse20012DefaultNodeInfo;
    /**
     * 
     * @type {InlineResponse20012ApplicationVersion}
     * @memberof CosmosBaseTendermintV1beta1GetNodeInfoResponse
     */
    'application_version'?: InlineResponse20012ApplicationVersion;
}
/**
 * GetSyncingResponse is the response type for the Query/GetSyncing RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetSyncingResponse
 */
export interface CosmosBaseTendermintV1beta1GetSyncingResponse {
    /**
     * 
     * @type {boolean}
     * @memberof CosmosBaseTendermintV1beta1GetSyncingResponse
     */
    'syncing'?: boolean;
}
/**
 * GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method.
 * @export
 * @interface CosmosBaseTendermintV1beta1GetValidatorSetByHeightResponse
 */
export interface CosmosBaseTendermintV1beta1GetValidatorSetByHeightResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1GetValidatorSetByHeightResponse
     */
    'block_height'?: string;
    /**
     * 
     * @type {Array<InlineResponse20014Validators>}
     * @memberof CosmosBaseTendermintV1beta1GetValidatorSetByHeightResponse
     */
    'validators'?: Array<InlineResponse20014Validators>;
    /**
     * 
     * @type {InlineResponse20014Pagination}
     * @memberof CosmosBaseTendermintV1beta1GetValidatorSetByHeightResponse
     */
    'pagination'?: InlineResponse20014Pagination;
}
/**
 * 
 * @export
 * @interface CosmosBaseTendermintV1beta1Module
 */
export interface CosmosBaseTendermintV1beta1Module {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1Module
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1Module
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1Module
     */
    'sum'?: string;
}
/**
 * Validator is the type for the validator-set.
 * @export
 * @interface CosmosBaseTendermintV1beta1Validator
 */
export interface CosmosBaseTendermintV1beta1Validator {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1Validator
     */
    'address'?: string;
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof CosmosBaseTendermintV1beta1Validator
     */
    'pub_key'?: InlineResponse200Accounts;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1Validator
     */
    'voting_power'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1Validator
     */
    'proposer_priority'?: string;
}
/**
 * VersionInfo is the type for the GetNodeInfoResponse message.
 * @export
 * @interface CosmosBaseTendermintV1beta1VersionInfo
 */
export interface CosmosBaseTendermintV1beta1VersionInfo {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1VersionInfo
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1VersionInfo
     */
    'app_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1VersionInfo
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1VersionInfo
     */
    'git_commit'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1VersionInfo
     */
    'build_tags'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1VersionInfo
     */
    'go_version'?: string;
    /**
     * 
     * @type {Array<ModuleIsTheTypeForVersionInfo>}
     * @memberof CosmosBaseTendermintV1beta1VersionInfo
     */
    'build_deps'?: Array<ModuleIsTheTypeForVersionInfo>;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseTendermintV1beta1VersionInfo
     */
    'cosmos_sdk_version'?: string;
}
/**
 * Coin defines a token with a denomination and an amount.  NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 * @export
 * @interface CosmosBaseV1beta1Coin
 */
export interface CosmosBaseV1beta1Coin {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseV1beta1Coin
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseV1beta1Coin
     */
    'amount'?: string;
}
/**
 * DecCoin defines a token with a denomination and a decimal amount.  NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto.
 * @export
 * @interface CosmosBaseV1beta1DecCoin
 */
export interface CosmosBaseV1beta1DecCoin {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseV1beta1DecCoin
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseV1beta1DecCoin
     */
    'amount'?: string;
}
/**
 * CompactBitArray is an implementation of a space efficient bit array. This is used to ensure that the encoded data takes up a minimal amount of space after proto encoding. This is not thread safe, and is not intended for concurrent usage.
 * @export
 * @interface CosmosCryptoMultisigV1beta1CompactBitArray
 */
export interface CosmosCryptoMultisigV1beta1CompactBitArray {
    /**
     * 
     * @type {number}
     * @memberof CosmosCryptoMultisigV1beta1CompactBitArray
     */
    'extra_bits_stored'?: number;
    /**
     * 
     * @type {string}
     * @memberof CosmosCryptoMultisigV1beta1CompactBitArray
     */
    'elems'?: string;
}
/**
 * DelegationDelegatorReward represents the properties of a delegator\'s delegation reward.
 * @export
 * @interface CosmosDistributionV1beta1DelegationDelegatorReward
 */
export interface CosmosDistributionV1beta1DelegationDelegatorReward {
    /**
     * 
     * @type {string}
     * @memberof CosmosDistributionV1beta1DelegationDelegatorReward
     */
    'validator_address'?: string;
    /**
     * 
     * @type {Array<InlineResponse20016Pool>}
     * @memberof CosmosDistributionV1beta1DelegationDelegatorReward
     */
    'reward'?: Array<InlineResponse20016Pool>;
}
/**
 * Params defines the set of params for the distribution module.
 * @export
 * @interface CosmosDistributionV1beta1Params
 */
export interface CosmosDistributionV1beta1Params {
    /**
     * 
     * @type {string}
     * @memberof CosmosDistributionV1beta1Params
     */
    'community_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosDistributionV1beta1Params
     */
    'base_proposer_reward'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosDistributionV1beta1Params
     */
    'bonus_proposer_reward'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CosmosDistributionV1beta1Params
     */
    'withdraw_addr_enabled'?: boolean;
}
/**
 * QueryCommunityPoolResponse is the response type for the Query/CommunityPool RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryCommunityPoolResponse
 */
export interface CosmosDistributionV1beta1QueryCommunityPoolResponse {
    /**
     * pool defines community pool\'s coins.
     * @type {Array<InlineResponse20016Pool>}
     * @memberof CosmosDistributionV1beta1QueryCommunityPoolResponse
     */
    'pool'?: Array<InlineResponse20016Pool>;
}
/**
 * QueryDelegationRewardsResponse is the response type for the Query/DelegationRewards RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryDelegationRewardsResponse
 */
export interface CosmosDistributionV1beta1QueryDelegationRewardsResponse {
    /**
     * rewards defines the rewards accrued by a delegation.
     * @type {Array<InlineResponse20016Pool>}
     * @memberof CosmosDistributionV1beta1QueryDelegationRewardsResponse
     */
    'rewards'?: Array<InlineResponse20016Pool>;
}
/**
 * QueryDelegationTotalRewardsResponse is the response type for the Query/DelegationTotalRewards RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryDelegationTotalRewardsResponse
 */
export interface CosmosDistributionV1beta1QueryDelegationTotalRewardsResponse {
    /**
     * rewards defines all the rewards accrued by a delegator.
     * @type {Array<InlineResponse20017Rewards>}
     * @memberof CosmosDistributionV1beta1QueryDelegationTotalRewardsResponse
     */
    'rewards'?: Array<InlineResponse20017Rewards>;
    /**
     * total defines the sum of all the rewards.
     * @type {Array<InlineResponse20016Pool>}
     * @memberof CosmosDistributionV1beta1QueryDelegationTotalRewardsResponse
     */
    'total'?: Array<InlineResponse20016Pool>;
}
/**
 * QueryDelegatorValidatorsResponse is the response type for the Query/DelegatorValidators RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryDelegatorValidatorsResponse
 */
export interface CosmosDistributionV1beta1QueryDelegatorValidatorsResponse {
    /**
     * validators defines the validators a delegator is delegating for.
     * @type {Array<string>}
     * @memberof CosmosDistributionV1beta1QueryDelegatorValidatorsResponse
     */
    'validators'?: Array<string>;
}
/**
 * QueryDelegatorWithdrawAddressResponse is the response type for the Query/DelegatorWithdrawAddress RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryDelegatorWithdrawAddressResponse
 */
export interface CosmosDistributionV1beta1QueryDelegatorWithdrawAddressResponse {
    /**
     * withdraw_address defines the delegator address to query for.
     * @type {string}
     * @memberof CosmosDistributionV1beta1QueryDelegatorWithdrawAddressResponse
     */
    'withdraw_address'?: string;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryParamsResponse
 */
export interface CosmosDistributionV1beta1QueryParamsResponse {
    /**
     * 
     * @type {InlineResponse20021Params}
     * @memberof CosmosDistributionV1beta1QueryParamsResponse
     */
    'params'?: InlineResponse20021Params;
}
/**
 * 
 * @export
 * @interface CosmosDistributionV1beta1QueryValidatorCommissionResponse
 */
export interface CosmosDistributionV1beta1QueryValidatorCommissionResponse {
    /**
     * 
     * @type {QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission}
     * @memberof CosmosDistributionV1beta1QueryValidatorCommissionResponse
     */
    'commission'?: QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission;
}
/**
 * QueryValidatorOutstandingRewardsResponse is the response type for the Query/ValidatorOutstandingRewards RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryValidatorOutstandingRewardsResponse
 */
export interface CosmosDistributionV1beta1QueryValidatorOutstandingRewardsResponse {
    /**
     * 
     * @type {InlineResponse20022Rewards}
     * @memberof CosmosDistributionV1beta1QueryValidatorOutstandingRewardsResponse
     */
    'rewards'?: InlineResponse20022Rewards;
}
/**
 * QueryValidatorSlashesResponse is the response type for the Query/ValidatorSlashes RPC method.
 * @export
 * @interface CosmosDistributionV1beta1QueryValidatorSlashesResponse
 */
export interface CosmosDistributionV1beta1QueryValidatorSlashesResponse {
    /**
     * slashes defines the slashes the validator received.
     * @type {Array<InlineResponse20023Slashes>}
     * @memberof CosmosDistributionV1beta1QueryValidatorSlashesResponse
     */
    'slashes'?: Array<InlineResponse20023Slashes>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosDistributionV1beta1QueryValidatorSlashesResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * ValidatorAccumulatedCommission represents accumulated commission for a validator kept as a running counter, can be withdrawn at any time.
 * @export
 * @interface CosmosDistributionV1beta1ValidatorAccumulatedCommission
 */
export interface CosmosDistributionV1beta1ValidatorAccumulatedCommission {
    /**
     * 
     * @type {Array<InlineResponse20016Pool>}
     * @memberof CosmosDistributionV1beta1ValidatorAccumulatedCommission
     */
    'commission'?: Array<InlineResponse20016Pool>;
}
/**
 * ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards for a validator inexpensive to track, allows simple sanity checks.
 * @export
 * @interface CosmosDistributionV1beta1ValidatorOutstandingRewards
 */
export interface CosmosDistributionV1beta1ValidatorOutstandingRewards {
    /**
     * 
     * @type {Array<InlineResponse20016Pool>}
     * @memberof CosmosDistributionV1beta1ValidatorOutstandingRewards
     */
    'rewards'?: Array<InlineResponse20016Pool>;
}
/**
 * ValidatorSlashEvent represents a validator slash event. Height is implicit within the store key. This is needed to calculate appropriate amount of staking tokens for delegations which are withdrawn after a slash has occurred.
 * @export
 * @interface CosmosDistributionV1beta1ValidatorSlashEvent
 */
export interface CosmosDistributionV1beta1ValidatorSlashEvent {
    /**
     * 
     * @type {string}
     * @memberof CosmosDistributionV1beta1ValidatorSlashEvent
     */
    'validator_period'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosDistributionV1beta1ValidatorSlashEvent
     */
    'fraction'?: string;
}
/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC method.
 * @export
 * @interface CosmosEvidenceV1beta1QueryAllEvidenceResponse
 */
export interface CosmosEvidenceV1beta1QueryAllEvidenceResponse {
    /**
     * evidence returns all evidences.
     * @type {Array<InlineResponse200Accounts>}
     * @memberof CosmosEvidenceV1beta1QueryAllEvidenceResponse
     */
    'evidence'?: Array<InlineResponse200Accounts>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosEvidenceV1beta1QueryAllEvidenceResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
 * @export
 * @interface CosmosEvidenceV1beta1QueryEvidenceResponse
 */
export interface CosmosEvidenceV1beta1QueryEvidenceResponse {
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof CosmosEvidenceV1beta1QueryEvidenceResponse
     */
    'evidence'?: InlineResponse200Accounts;
}
/**
 * 
 * @export
 * @interface CosmosFeegrantV1beta1Grant
 */
export interface CosmosFeegrantV1beta1Grant {
    /**
     * granter is the address of the user granting an allowance of their funds.
     * @type {string}
     * @memberof CosmosFeegrantV1beta1Grant
     */
    'granter'?: string;
    /**
     * grantee is the address of the user being granted an allowance of another user\'s funds.
     * @type {string}
     * @memberof CosmosFeegrantV1beta1Grant
     */
    'grantee'?: string;
    /**
     * 
     * @type {GrantIsStoredInTheKVStoreToRecordAGrantWithFullContextAllowance}
     * @memberof CosmosFeegrantV1beta1Grant
     */
    'allowance'?: GrantIsStoredInTheKVStoreToRecordAGrantWithFullContextAllowance;
}
/**
 * QueryAllowanceResponse is the response type for the Query/Allowance RPC method.
 * @export
 * @interface CosmosFeegrantV1beta1QueryAllowanceResponse
 */
export interface CosmosFeegrantV1beta1QueryAllowanceResponse {
    /**
     * 
     * @type {GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext}
     * @memberof CosmosFeegrantV1beta1QueryAllowanceResponse
     */
    'allowance'?: GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext;
}
/**
 * QueryAllowancesResponse is the response type for the Query/Allowances RPC method.
 * @export
 * @interface CosmosFeegrantV1beta1QueryAllowancesResponse
 */
export interface CosmosFeegrantV1beta1QueryAllowancesResponse {
    /**
     * allowances are allowance\'s granted for grantee by granter.
     * @type {Array<GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext1>}
     * @memberof CosmosFeegrantV1beta1QueryAllowancesResponse
     */
    'allowances'?: Array<GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext1>;
    /**
     * 
     * @type {InlineResponse20014Pagination}
     * @memberof CosmosFeegrantV1beta1QueryAllowancesResponse
     */
    'pagination'?: InlineResponse20014Pagination;
}
/**
 * Deposit defines an amount deposited by an account address to an active proposal.
 * @export
 * @interface CosmosGovV1beta1Deposit
 */
export interface CosmosGovV1beta1Deposit {
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1Deposit
     */
    'proposal_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1Deposit
     */
    'depositor'?: string;
    /**
     * 
     * @type {Array<InlineResponse2003Balances>}
     * @memberof CosmosGovV1beta1Deposit
     */
    'amount'?: Array<InlineResponse2003Balances>;
}
/**
 * DepositParams defines the params for deposits on governance proposals.
 * @export
 * @interface CosmosGovV1beta1DepositParams
 */
export interface CosmosGovV1beta1DepositParams {
    /**
     * Minimum deposit for a proposal to enter voting period.
     * @type {Array<InlineResponse2003Balances>}
     * @memberof CosmosGovV1beta1DepositParams
     */
    'min_deposit'?: Array<InlineResponse2003Balances>;
    /**
     * Maximum period for Atom holders to deposit on a proposal. Initial value: 2  months.
     * @type {string}
     * @memberof CosmosGovV1beta1DepositParams
     */
    'max_deposit_period'?: string;
}
/**
 * Proposal defines the core field members of a governance proposal.
 * @export
 * @interface CosmosGovV1beta1Proposal
 */
export interface CosmosGovV1beta1Proposal {
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1Proposal
     */
    'proposal_id'?: string;
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof CosmosGovV1beta1Proposal
     */
    'content'?: InlineResponse200Accounts;
    /**
     * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @type {string}
     * @memberof CosmosGovV1beta1Proposal
     */
    'status'?: CosmosGovV1beta1ProposalStatusEnum;
    /**
     * 
     * @type {InlineResponse20027FinalTallyResult}
     * @memberof CosmosGovV1beta1Proposal
     */
    'final_tally_result'?: InlineResponse20027FinalTallyResult;
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1Proposal
     */
    'submit_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1Proposal
     */
    'deposit_end_time'?: string;
    /**
     * 
     * @type {Array<InlineResponse2003Balances>}
     * @memberof CosmosGovV1beta1Proposal
     */
    'total_deposit'?: Array<InlineResponse2003Balances>;
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1Proposal
     */
    'voting_start_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1Proposal
     */
    'voting_end_time'?: string;
}

export const CosmosGovV1beta1ProposalStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
} as const;

export type CosmosGovV1beta1ProposalStatusEnum = typeof CosmosGovV1beta1ProposalStatusEnum[keyof typeof CosmosGovV1beta1ProposalStatusEnum];

/**
 * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
 * @export
 * @enum {string}
 */

export const CosmosGovV1beta1ProposalStatus = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
} as const;

export type CosmosGovV1beta1ProposalStatus = typeof CosmosGovV1beta1ProposalStatus[keyof typeof CosmosGovV1beta1ProposalStatus];


/**
 * QueryDepositResponse is the response type for the Query/Deposit RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryDepositResponse
 */
export interface CosmosGovV1beta1QueryDepositResponse {
    /**
     * 
     * @type {InlineResponse20029Deposits}
     * @memberof CosmosGovV1beta1QueryDepositResponse
     */
    'deposit'?: InlineResponse20029Deposits;
}
/**
 * QueryDepositsResponse is the response type for the Query/Deposits RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryDepositsResponse
 */
export interface CosmosGovV1beta1QueryDepositsResponse {
    /**
     * 
     * @type {Array<InlineResponse20029Deposits>}
     * @memberof CosmosGovV1beta1QueryDepositsResponse
     */
    'deposits'?: Array<InlineResponse20029Deposits>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosGovV1beta1QueryDepositsResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryParamsResponse
 */
export interface CosmosGovV1beta1QueryParamsResponse {
    /**
     * 
     * @type {InlineResponse20026VotingParams}
     * @memberof CosmosGovV1beta1QueryParamsResponse
     */
    'voting_params'?: InlineResponse20026VotingParams;
    /**
     * 
     * @type {InlineResponse20026DepositParams}
     * @memberof CosmosGovV1beta1QueryParamsResponse
     */
    'deposit_params'?: InlineResponse20026DepositParams;
    /**
     * 
     * @type {InlineResponse20026TallyParams}
     * @memberof CosmosGovV1beta1QueryParamsResponse
     */
    'tally_params'?: InlineResponse20026TallyParams;
}
/**
 * QueryProposalResponse is the response type for the Query/Proposal RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryProposalResponse
 */
export interface CosmosGovV1beta1QueryProposalResponse {
    /**
     * 
     * @type {InlineResponse20027Proposals}
     * @memberof CosmosGovV1beta1QueryProposalResponse
     */
    'proposal'?: InlineResponse20027Proposals;
}
/**
 * QueryProposalsResponse is the response type for the Query/Proposals RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryProposalsResponse
 */
export interface CosmosGovV1beta1QueryProposalsResponse {
    /**
     * 
     * @type {Array<InlineResponse20027Proposals>}
     * @memberof CosmosGovV1beta1QueryProposalsResponse
     */
    'proposals'?: Array<InlineResponse20027Proposals>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosGovV1beta1QueryProposalsResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryTallyResultResponse is the response type for the Query/Tally RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryTallyResultResponse
 */
export interface CosmosGovV1beta1QueryTallyResultResponse {
    /**
     * 
     * @type {InlineResponse20027FinalTallyResult}
     * @memberof CosmosGovV1beta1QueryTallyResultResponse
     */
    'tally'?: InlineResponse20027FinalTallyResult;
}
/**
 * QueryVoteResponse is the response type for the Query/Vote RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryVoteResponse
 */
export interface CosmosGovV1beta1QueryVoteResponse {
    /**
     * 
     * @type {InlineResponse20032Votes}
     * @memberof CosmosGovV1beta1QueryVoteResponse
     */
    'vote'?: InlineResponse20032Votes;
}
/**
 * QueryVotesResponse is the response type for the Query/Votes RPC method.
 * @export
 * @interface CosmosGovV1beta1QueryVotesResponse
 */
export interface CosmosGovV1beta1QueryVotesResponse {
    /**
     * votes defined the queried votes.
     * @type {Array<InlineResponse20032Votes>}
     * @memberof CosmosGovV1beta1QueryVotesResponse
     */
    'votes'?: Array<InlineResponse20032Votes>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosGovV1beta1QueryVotesResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * TallyParams defines the params for tallying votes on governance proposals.
 * @export
 * @interface CosmosGovV1beta1TallyParams
 */
export interface CosmosGovV1beta1TallyParams {
    /**
     * Minimum percentage of total stake needed to vote for a result to be  considered valid.
     * @type {string}
     * @memberof CosmosGovV1beta1TallyParams
     */
    'quorum'?: string;
    /**
     * Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
     * @type {string}
     * @memberof CosmosGovV1beta1TallyParams
     */
    'threshold'?: string;
    /**
     * Minimum value of Veto votes to Total votes ratio for proposal to be  vetoed. Default value: 1/3.
     * @type {string}
     * @memberof CosmosGovV1beta1TallyParams
     */
    'veto_threshold'?: string;
}
/**
 * TallyResult defines a standard tally for a governance proposal.
 * @export
 * @interface CosmosGovV1beta1TallyResult
 */
export interface CosmosGovV1beta1TallyResult {
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1TallyResult
     */
    'yes'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1TallyResult
     */
    'abstain'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1TallyResult
     */
    'no'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1TallyResult
     */
    'no_with_veto'?: string;
}
/**
 * Vote defines a vote on a governance proposal. A Vote consists of a proposal ID, the voter, and the vote option.
 * @export
 * @interface CosmosGovV1beta1Vote
 */
export interface CosmosGovV1beta1Vote {
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1Vote
     */
    'proposal_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1Vote
     */
    'voter'?: string;
    /**
     * Deprecated: Prefer to use `options` instead. This field is set in queries if and only if `len(options) == 1` and that option has weight 1. In all other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
     * @type {string}
     * @memberof CosmosGovV1beta1Vote
     */
    'option'?: CosmosGovV1beta1VoteOptionEnum;
    /**
     * 
     * @type {Array<InlineResponse20032Options>}
     * @memberof CosmosGovV1beta1Vote
     */
    'options'?: Array<InlineResponse20032Options>;
}

export const CosmosGovV1beta1VoteOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
} as const;

export type CosmosGovV1beta1VoteOptionEnum = typeof CosmosGovV1beta1VoteOptionEnum[keyof typeof CosmosGovV1beta1VoteOptionEnum];

/**
 * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
 * @export
 * @enum {string}
 */

export const CosmosGovV1beta1VoteOption = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
} as const;

export type CosmosGovV1beta1VoteOption = typeof CosmosGovV1beta1VoteOption[keyof typeof CosmosGovV1beta1VoteOption];


/**
 * VotingParams defines the params for voting on governance proposals.
 * @export
 * @interface CosmosGovV1beta1VotingParams
 */
export interface CosmosGovV1beta1VotingParams {
    /**
     * Length of the voting period.
     * @type {string}
     * @memberof CosmosGovV1beta1VotingParams
     */
    'voting_period'?: string;
}
/**
 * WeightedVoteOption defines a unit of vote for vote split.
 * @export
 * @interface CosmosGovV1beta1WeightedVoteOption
 */
export interface CosmosGovV1beta1WeightedVoteOption {
    /**
     * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
     * @type {string}
     * @memberof CosmosGovV1beta1WeightedVoteOption
     */
    'option'?: CosmosGovV1beta1WeightedVoteOptionOptionEnum;
    /**
     * 
     * @type {string}
     * @memberof CosmosGovV1beta1WeightedVoteOption
     */
    'weight'?: string;
}

export const CosmosGovV1beta1WeightedVoteOptionOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
} as const;

export type CosmosGovV1beta1WeightedVoteOptionOptionEnum = typeof CosmosGovV1beta1WeightedVoteOptionOptionEnum[keyof typeof CosmosGovV1beta1WeightedVoteOptionOptionEnum];

/**
 * Params holds parameters for the mint module.
 * @export
 * @interface CosmosMintV1beta1Params
 */
export interface CosmosMintV1beta1Params {
    /**
     * 
     * @type {string}
     * @memberof CosmosMintV1beta1Params
     */
    'mint_denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosMintV1beta1Params
     */
    'inflation_rate_change'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosMintV1beta1Params
     */
    'inflation_max'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosMintV1beta1Params
     */
    'inflation_min'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosMintV1beta1Params
     */
    'goal_bonded'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosMintV1beta1Params
     */
    'blocks_per_year'?: string;
}
/**
 * QueryAnnualProvisionsResponse is the response type for the Query/AnnualProvisions RPC method.
 * @export
 * @interface CosmosMintV1beta1QueryAnnualProvisionsResponse
 */
export interface CosmosMintV1beta1QueryAnnualProvisionsResponse {
    /**
     * annual_provisions is the current minting annual provisions value.
     * @type {string}
     * @memberof CosmosMintV1beta1QueryAnnualProvisionsResponse
     */
    'annual_provisions'?: string;
}
/**
 * QueryInflationResponse is the response type for the Query/Inflation RPC method.
 * @export
 * @interface CosmosMintV1beta1QueryInflationResponse
 */
export interface CosmosMintV1beta1QueryInflationResponse {
    /**
     * inflation is the current minting inflation value.
     * @type {string}
     * @memberof CosmosMintV1beta1QueryInflationResponse
     */
    'inflation'?: string;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface CosmosMintV1beta1QueryParamsResponse
 */
export interface CosmosMintV1beta1QueryParamsResponse {
    /**
     * 
     * @type {InlineResponse20036Params}
     * @memberof CosmosMintV1beta1QueryParamsResponse
     */
    'params'?: InlineResponse20036Params;
}
/**
 * ParamChange defines an individual parameter change, for use in ParameterChangeProposal.
 * @export
 * @interface CosmosParamsV1beta1ParamChange
 */
export interface CosmosParamsV1beta1ParamChange {
    /**
     * 
     * @type {string}
     * @memberof CosmosParamsV1beta1ParamChange
     */
    'subspace'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosParamsV1beta1ParamChange
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosParamsV1beta1ParamChange
     */
    'value'?: string;
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 * @export
 * @interface CosmosParamsV1beta1QueryParamsResponse
 */
export interface CosmosParamsV1beta1QueryParamsResponse {
    /**
     * 
     * @type {InlineResponse20037Param}
     * @memberof CosmosParamsV1beta1QueryParamsResponse
     */
    'param'?: InlineResponse20037Param;
}
/**
 * Params represents the parameters used for by the slashing module.
 * @export
 * @interface CosmosSlashingV1beta1Params
 */
export interface CosmosSlashingV1beta1Params {
    /**
     * 
     * @type {string}
     * @memberof CosmosSlashingV1beta1Params
     */
    'signed_blocks_window'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosSlashingV1beta1Params
     */
    'min_signed_per_window'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosSlashingV1beta1Params
     */
    'downtime_jail_duration'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosSlashingV1beta1Params
     */
    'slash_fraction_double_sign'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosSlashingV1beta1Params
     */
    'slash_fraction_downtime'?: string;
}
/**
 * 
 * @export
 * @interface CosmosSlashingV1beta1QueryParamsResponse
 */
export interface CosmosSlashingV1beta1QueryParamsResponse {
    /**
     * 
     * @type {QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams}
     * @memberof CosmosSlashingV1beta1QueryParamsResponse
     */
    'params'?: QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams;
}
/**
 * 
 * @export
 * @interface CosmosSlashingV1beta1QuerySigningInfoResponse
 */
export interface CosmosSlashingV1beta1QuerySigningInfoResponse {
    /**
     * 
     * @type {ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress}
     * @memberof CosmosSlashingV1beta1QuerySigningInfoResponse
     */
    'val_signing_info'?: ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress;
}
/**
 * 
 * @export
 * @interface CosmosSlashingV1beta1QuerySigningInfosResponse
 */
export interface CosmosSlashingV1beta1QuerySigningInfosResponse {
    /**
     * 
     * @type {Array<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo>}
     * @memberof CosmosSlashingV1beta1QuerySigningInfosResponse
     */
    'info'?: Array<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo>;
    /**
     * 
     * @type {QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination}
     * @memberof CosmosSlashingV1beta1QuerySigningInfosResponse
     */
    'pagination'?: QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination;
}
/**
 * ValidatorSigningInfo defines a validator\'s signing info for monitoring their liveness activity.
 * @export
 * @interface CosmosSlashingV1beta1ValidatorSigningInfo
 */
export interface CosmosSlashingV1beta1ValidatorSigningInfo {
    /**
     * 
     * @type {string}
     * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
     */
    'start_height'?: string;
    /**
     * Index which is incremented each time the validator was a bonded in a block and may have signed a precommit or not. This in conjunction with the `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
     * @type {string}
     * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
     */
    'index_offset'?: string;
    /**
     * Timestamp until which the validator is jailed due to liveness downtime.
     * @type {string}
     * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
     */
    'jailed_until'?: string;
    /**
     * Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehiavor.
     * @type {boolean}
     * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
     */
    'tombstoned'?: boolean;
    /**
     * A counter kept to avoid unnecessary array reads. Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
     * @type {string}
     * @memberof CosmosSlashingV1beta1ValidatorSigningInfo
     */
    'missed_blocks_counter'?: string;
}
/**
 * BondStatus is the status of a validator.   - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.  - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.  - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.  - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
 * @export
 * @enum {string}
 */

export const CosmosStakingV1beta1BondStatus = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
} as const;

export type CosmosStakingV1beta1BondStatus = typeof CosmosStakingV1beta1BondStatus[keyof typeof CosmosStakingV1beta1BondStatus];


/**
 * Commission defines commission parameters for a given validator.
 * @export
 * @interface CosmosStakingV1beta1Commission
 */
export interface CosmosStakingV1beta1Commission {
    /**
     * 
     * @type {InlineResponse20041CommissionCommissionRates}
     * @memberof CosmosStakingV1beta1Commission
     */
    'commission_rates'?: InlineResponse20041CommissionCommissionRates;
    /**
     * update_time is the last time the commission rate was changed.
     * @type {string}
     * @memberof CosmosStakingV1beta1Commission
     */
    'update_time'?: string;
}
/**
 * CommissionRates defines the initial commission rates to be used for creating a validator.
 * @export
 * @interface CosmosStakingV1beta1CommissionRates
 */
export interface CosmosStakingV1beta1CommissionRates {
    /**
     * rate is the commission rate charged to delegators, as a fraction.
     * @type {string}
     * @memberof CosmosStakingV1beta1CommissionRates
     */
    'rate'?: string;
    /**
     * max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
     * @type {string}
     * @memberof CosmosStakingV1beta1CommissionRates
     */
    'max_rate'?: string;
    /**
     * max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
     * @type {string}
     * @memberof CosmosStakingV1beta1CommissionRates
     */
    'max_change_rate'?: string;
}
/**
 * Delegation represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator.
 * @export
 * @interface CosmosStakingV1beta1Delegation
 */
export interface CosmosStakingV1beta1Delegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     * @type {string}
     * @memberof CosmosStakingV1beta1Delegation
     */
    'delegator_address'?: string;
    /**
     * validator_address is the bech32-encoded address of the validator.
     * @type {string}
     * @memberof CosmosStakingV1beta1Delegation
     */
    'validator_address'?: string;
    /**
     * shares define the delegation shares received.
     * @type {string}
     * @memberof CosmosStakingV1beta1Delegation
     */
    'shares'?: string;
}
/**
 * DelegationResponse is equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface CosmosStakingV1beta1DelegationResponse
 */
export interface CosmosStakingV1beta1DelegationResponse {
    /**
     * 
     * @type {InlineResponse20038Delegation}
     * @memberof CosmosStakingV1beta1DelegationResponse
     */
    'delegation'?: InlineResponse20038Delegation;
    /**
     * 
     * @type {InlineResponse2003Balances}
     * @memberof CosmosStakingV1beta1DelegationResponse
     */
    'balance'?: InlineResponse2003Balances;
}
/**
 * Description defines a validator description.
 * @export
 * @interface CosmosStakingV1beta1Description
 */
export interface CosmosStakingV1beta1Description {
    /**
     * moniker defines a human-readable name for the validator.
     * @type {string}
     * @memberof CosmosStakingV1beta1Description
     */
    'moniker'?: string;
    /**
     * identity defines an optional identity signature (ex. UPort or Keybase).
     * @type {string}
     * @memberof CosmosStakingV1beta1Description
     */
    'identity'?: string;
    /**
     * website defines an optional website link.
     * @type {string}
     * @memberof CosmosStakingV1beta1Description
     */
    'website'?: string;
    /**
     * security_contact defines an optional email for security contact.
     * @type {string}
     * @memberof CosmosStakingV1beta1Description
     */
    'security_contact'?: string;
    /**
     * details define other optional details.
     * @type {string}
     * @memberof CosmosStakingV1beta1Description
     */
    'details'?: string;
}
/**
 * HistoricalInfo contains header and validator information for a given block. It is stored as part of staking module\'s state, which persists the `n` most recent HistoricalInfo (`n` is set by the staking module\'s `historical_entries` parameter).
 * @export
 * @interface CosmosStakingV1beta1HistoricalInfo
 */
export interface CosmosStakingV1beta1HistoricalInfo {
    /**
     * 
     * @type {InlineResponse20043HistHeader}
     * @memberof CosmosStakingV1beta1HistoricalInfo
     */
    'header'?: InlineResponse20043HistHeader;
    /**
     * 
     * @type {Array<InlineResponse20041Validators>}
     * @memberof CosmosStakingV1beta1HistoricalInfo
     */
    'valset'?: Array<InlineResponse20041Validators>;
}
/**
 * Params defines the parameters for the staking module.
 * @export
 * @interface CosmosStakingV1beta1Params
 */
export interface CosmosStakingV1beta1Params {
    /**
     * unbonding_time is the time duration of unbonding.
     * @type {string}
     * @memberof CosmosStakingV1beta1Params
     */
    'unbonding_time'?: string;
    /**
     * max_validators is the maximum number of validators.
     * @type {number}
     * @memberof CosmosStakingV1beta1Params
     */
    'max_validators'?: number;
    /**
     * max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
     * @type {number}
     * @memberof CosmosStakingV1beta1Params
     */
    'max_entries'?: number;
    /**
     * historical_entries is the number of historical entries to persist.
     * @type {number}
     * @memberof CosmosStakingV1beta1Params
     */
    'historical_entries'?: number;
    /**
     * bond_denom defines the bondable coin denomination.
     * @type {string}
     * @memberof CosmosStakingV1beta1Params
     */
    'bond_denom'?: string;
}
/**
 * Pool is used for tracking bonded and not-bonded token supply of the bond denomination.
 * @export
 * @interface CosmosStakingV1beta1Pool
 */
export interface CosmosStakingV1beta1Pool {
    /**
     * 
     * @type {string}
     * @memberof CosmosStakingV1beta1Pool
     */
    'not_bonded_tokens'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosStakingV1beta1Pool
     */
    'bonded_tokens'?: string;
}
/**
 * QueryDelegationResponse is response type for the Query/Delegation RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegationResponse
 */
export interface CosmosStakingV1beta1QueryDelegationResponse {
    /**
     * 
     * @type {InlineResponse20038DelegationResponses}
     * @memberof CosmosStakingV1beta1QueryDelegationResponse
     */
    'delegation_response'?: InlineResponse20038DelegationResponses;
}
/**
 * QueryDelegatorDelegationsResponse is response type for the Query/DelegatorDelegations RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegatorDelegationsResponse
 */
export interface CosmosStakingV1beta1QueryDelegatorDelegationsResponse {
    /**
     * delegation_responses defines all the delegations\' info of a delegator.
     * @type {Array<InlineResponse20038DelegationResponses>}
     * @memberof CosmosStakingV1beta1QueryDelegatorDelegationsResponse
     */
    'delegation_responses'?: Array<InlineResponse20038DelegationResponses>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosStakingV1beta1QueryDelegatorDelegationsResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryUnbondingDelegatorDelegationsResponse is response type for the Query/UnbondingDelegatorDelegations RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse
 */
export interface CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse {
    /**
     * 
     * @type {Array<InlineResponse20040UnbondingResponses>}
     * @memberof CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse
     */
    'unbonding_responses'?: Array<InlineResponse20040UnbondingResponses>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosStakingV1beta1QueryDelegatorUnbondingDelegationsResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryDelegatorValidatorResponse response type for the Query/DelegatorValidator RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegatorValidatorResponse
 */
export interface CosmosStakingV1beta1QueryDelegatorValidatorResponse {
    /**
     * 
     * @type {InlineResponse20041Validators}
     * @memberof CosmosStakingV1beta1QueryDelegatorValidatorResponse
     */
    'validator'?: InlineResponse20041Validators;
}
/**
 * QueryDelegatorValidatorsResponse is response type for the Query/DelegatorValidators RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryDelegatorValidatorsResponse
 */
export interface CosmosStakingV1beta1QueryDelegatorValidatorsResponse {
    /**
     * validators defines the validators\' info of a delegator.
     * @type {Array<InlineResponse20041Validators>}
     * @memberof CosmosStakingV1beta1QueryDelegatorValidatorsResponse
     */
    'validators'?: Array<InlineResponse20041Validators>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosStakingV1beta1QueryDelegatorValidatorsResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryHistoricalInfoResponse
 */
export interface CosmosStakingV1beta1QueryHistoricalInfoResponse {
    /**
     * 
     * @type {InlineResponse20043Hist}
     * @memberof CosmosStakingV1beta1QueryHistoricalInfoResponse
     */
    'hist'?: InlineResponse20043Hist;
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryParamsResponse
 */
export interface CosmosStakingV1beta1QueryParamsResponse {
    /**
     * 
     * @type {InlineResponse20044Params}
     * @memberof CosmosStakingV1beta1QueryParamsResponse
     */
    'params'?: InlineResponse20044Params;
}
/**
 * QueryPoolResponse is response type for the Query/Pool RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryPoolResponse
 */
export interface CosmosStakingV1beta1QueryPoolResponse {
    /**
     * 
     * @type {InlineResponse20045Pool}
     * @memberof CosmosStakingV1beta1QueryPoolResponse
     */
    'pool'?: InlineResponse20045Pool;
}
/**
 * QueryRedelegationsResponse is response type for the Query/Redelegations RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryRedelegationsResponse
 */
export interface CosmosStakingV1beta1QueryRedelegationsResponse {
    /**
     * 
     * @type {Array<InlineResponse20039RedelegationResponses>}
     * @memberof CosmosStakingV1beta1QueryRedelegationsResponse
     */
    'redelegation_responses'?: Array<InlineResponse20039RedelegationResponses>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosStakingV1beta1QueryRedelegationsResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryDelegationResponse is response type for the Query/UnbondingDelegation RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryUnbondingDelegationResponse
 */
export interface CosmosStakingV1beta1QueryUnbondingDelegationResponse {
    /**
     * 
     * @type {InlineResponse20040UnbondingResponses}
     * @memberof CosmosStakingV1beta1QueryUnbondingDelegationResponse
     */
    'unbond'?: InlineResponse20040UnbondingResponses;
}
/**
 * 
 * @export
 * @interface CosmosStakingV1beta1QueryValidatorDelegationsResponse
 */
export interface CosmosStakingV1beta1QueryValidatorDelegationsResponse {
    /**
     * 
     * @type {Array<InlineResponse20038DelegationResponses>}
     * @memberof CosmosStakingV1beta1QueryValidatorDelegationsResponse
     */
    'delegation_responses'?: Array<InlineResponse20038DelegationResponses>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosStakingV1beta1QueryValidatorDelegationsResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface CosmosStakingV1beta1QueryValidatorResponse
 */
export interface CosmosStakingV1beta1QueryValidatorResponse {
    /**
     * 
     * @type {InlineResponse20041Validators}
     * @memberof CosmosStakingV1beta1QueryValidatorResponse
     */
    'validator'?: InlineResponse20041Validators;
}
/**
 * QueryValidatorUnbondingDelegationsResponse is response type for the Query/ValidatorUnbondingDelegations RPC method.
 * @export
 * @interface CosmosStakingV1beta1QueryValidatorUnbondingDelegationsResponse
 */
export interface CosmosStakingV1beta1QueryValidatorUnbondingDelegationsResponse {
    /**
     * 
     * @type {Array<InlineResponse20040UnbondingResponses>}
     * @memberof CosmosStakingV1beta1QueryValidatorUnbondingDelegationsResponse
     */
    'unbonding_responses'?: Array<InlineResponse20040UnbondingResponses>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosStakingV1beta1QueryValidatorUnbondingDelegationsResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface CosmosStakingV1beta1QueryValidatorsResponse
 */
export interface CosmosStakingV1beta1QueryValidatorsResponse {
    /**
     * validators contains all the queried validators.
     * @type {Array<InlineResponse20041Validators>}
     * @memberof CosmosStakingV1beta1QueryValidatorsResponse
     */
    'validators'?: Array<InlineResponse20041Validators>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof CosmosStakingV1beta1QueryValidatorsResponse
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * Redelegation contains the list of a particular delegator\'s redelegating bonds from a particular source validator to a particular destination validator.
 * @export
 * @interface CosmosStakingV1beta1Redelegation
 */
export interface CosmosStakingV1beta1Redelegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     * @type {string}
     * @memberof CosmosStakingV1beta1Redelegation
     */
    'delegator_address'?: string;
    /**
     * validator_src_address is the validator redelegation source operator address.
     * @type {string}
     * @memberof CosmosStakingV1beta1Redelegation
     */
    'validator_src_address'?: string;
    /**
     * validator_dst_address is the validator redelegation destination operator address.
     * @type {string}
     * @memberof CosmosStakingV1beta1Redelegation
     */
    'validator_dst_address'?: string;
    /**
     * entries are the redelegation entries.
     * @type {Array<InlineResponse20039RedelegationEntries>}
     * @memberof CosmosStakingV1beta1Redelegation
     */
    'entries'?: Array<InlineResponse20039RedelegationEntries>;
}
/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 * @export
 * @interface CosmosStakingV1beta1RedelegationEntry
 */
export interface CosmosStakingV1beta1RedelegationEntry {
    /**
     * creation_height  defines the height which the redelegation took place.
     * @type {string}
     * @memberof CosmosStakingV1beta1RedelegationEntry
     */
    'creation_height'?: string;
    /**
     * completion_time defines the unix time for redelegation completion.
     * @type {string}
     * @memberof CosmosStakingV1beta1RedelegationEntry
     */
    'completion_time'?: string;
    /**
     * initial_balance defines the initial balance when redelegation started.
     * @type {string}
     * @memberof CosmosStakingV1beta1RedelegationEntry
     */
    'initial_balance'?: string;
    /**
     * shares_dst is the amount of destination-validator shares created by redelegation.
     * @type {string}
     * @memberof CosmosStakingV1beta1RedelegationEntry
     */
    'shares_dst'?: string;
}
/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it contains a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface CosmosStakingV1beta1RedelegationEntryResponse
 */
export interface CosmosStakingV1beta1RedelegationEntryResponse {
    /**
     * 
     * @type {InlineResponse20039RedelegationEntries}
     * @memberof CosmosStakingV1beta1RedelegationEntryResponse
     */
    'redelegation_entry'?: InlineResponse20039RedelegationEntries;
    /**
     * 
     * @type {string}
     * @memberof CosmosStakingV1beta1RedelegationEntryResponse
     */
    'balance'?: string;
}
/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries contain a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface CosmosStakingV1beta1RedelegationResponse
 */
export interface CosmosStakingV1beta1RedelegationResponse {
    /**
     * 
     * @type {InlineResponse20039Redelegation}
     * @memberof CosmosStakingV1beta1RedelegationResponse
     */
    'redelegation'?: InlineResponse20039Redelegation;
    /**
     * 
     * @type {Array<InlineResponse20039Entries>}
     * @memberof CosmosStakingV1beta1RedelegationResponse
     */
    'entries'?: Array<InlineResponse20039Entries>;
}
/**
 * UnbondingDelegation stores all of a single delegator\'s unbonding bonds for a single validator in an time-ordered list.
 * @export
 * @interface CosmosStakingV1beta1UnbondingDelegation
 */
export interface CosmosStakingV1beta1UnbondingDelegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     * @type {string}
     * @memberof CosmosStakingV1beta1UnbondingDelegation
     */
    'delegator_address'?: string;
    /**
     * validator_address is the bech32-encoded address of the validator.
     * @type {string}
     * @memberof CosmosStakingV1beta1UnbondingDelegation
     */
    'validator_address'?: string;
    /**
     * entries are the unbonding delegation entries.
     * @type {Array<InlineResponse20040Entries>}
     * @memberof CosmosStakingV1beta1UnbondingDelegation
     */
    'entries'?: Array<InlineResponse20040Entries>;
}
/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 * @export
 * @interface CosmosStakingV1beta1UnbondingDelegationEntry
 */
export interface CosmosStakingV1beta1UnbondingDelegationEntry {
    /**
     * creation_height is the height which the unbonding took place.
     * @type {string}
     * @memberof CosmosStakingV1beta1UnbondingDelegationEntry
     */
    'creation_height'?: string;
    /**
     * completion_time is the unix time for unbonding completion.
     * @type {string}
     * @memberof CosmosStakingV1beta1UnbondingDelegationEntry
     */
    'completion_time'?: string;
    /**
     * initial_balance defines the tokens initially scheduled to receive at completion.
     * @type {string}
     * @memberof CosmosStakingV1beta1UnbondingDelegationEntry
     */
    'initial_balance'?: string;
    /**
     * balance defines the tokens to receive at completion.
     * @type {string}
     * @memberof CosmosStakingV1beta1UnbondingDelegationEntry
     */
    'balance'?: string;
}
/**
 * Validator defines a validator, together with the total amount of the Validator\'s bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate.
 * @export
 * @interface CosmosStakingV1beta1Validator
 */
export interface CosmosStakingV1beta1Validator {
    /**
     * operator_address defines the address of the validator\'s operator; bech encoded in JSON.
     * @type {string}
     * @memberof CosmosStakingV1beta1Validator
     */
    'operator_address'?: string;
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof CosmosStakingV1beta1Validator
     */
    'consensus_pubkey'?: InlineResponse200Accounts;
    /**
     * jailed defined whether the validator has been jailed from bonded status or not.
     * @type {boolean}
     * @memberof CosmosStakingV1beta1Validator
     */
    'jailed'?: boolean;
    /**
     * status is the validator status (bonded/unbonding/unbonded).
     * @type {string}
     * @memberof CosmosStakingV1beta1Validator
     */
    'status'?: CosmosStakingV1beta1ValidatorStatusEnum;
    /**
     * tokens define the delegated tokens (incl. self-delegation).
     * @type {string}
     * @memberof CosmosStakingV1beta1Validator
     */
    'tokens'?: string;
    /**
     * delegator_shares defines total shares issued to a validator\'s delegators.
     * @type {string}
     * @memberof CosmosStakingV1beta1Validator
     */
    'delegator_shares'?: string;
    /**
     * 
     * @type {InlineResponse20041Description}
     * @memberof CosmosStakingV1beta1Validator
     */
    'description'?: InlineResponse20041Description;
    /**
     * unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
     * @type {string}
     * @memberof CosmosStakingV1beta1Validator
     */
    'unbonding_height'?: string;
    /**
     * unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
     * @type {string}
     * @memberof CosmosStakingV1beta1Validator
     */
    'unbonding_time'?: string;
    /**
     * 
     * @type {InlineResponse20041Commission}
     * @memberof CosmosStakingV1beta1Validator
     */
    'commission'?: InlineResponse20041Commission;
    /**
     * min_self_delegation is the validator\'s self declared minimum self delegation.
     * @type {string}
     * @memberof CosmosStakingV1beta1Validator
     */
    'min_self_delegation'?: string;
}

export const CosmosStakingV1beta1ValidatorStatusEnum = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
} as const;

export type CosmosStakingV1beta1ValidatorStatusEnum = typeof CosmosStakingV1beta1ValidatorStatusEnum[keyof typeof CosmosStakingV1beta1ValidatorStatusEnum];

/**
 * SignMode represents a signing mode with its own security guarantees.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future
 * @export
 * @enum {string}
 */

export const CosmosTxSigningV1beta1SignMode = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON'
} as const;

export type CosmosTxSigningV1beta1SignMode = typeof CosmosTxSigningV1beta1SignMode[keyof typeof CosmosTxSigningV1beta1SignMode];


/**
 * AuthInfo describes the fee and signer modes that are used to sign a transaction.
 * @export
 * @interface CosmosTxV1beta1AuthInfo
 */
export interface CosmosTxV1beta1AuthInfo {
    /**
     * signer_infos defines the signing modes for the required signers. The number and order of elements must match the required signers from TxBody\'s messages. The first element is the primary signer and the one which pays the fee.
     * @type {Array<CosmosTxV1beta1SignerInfo>}
     * @memberof CosmosTxV1beta1AuthInfo
     */
    'signer_infos'?: Array<CosmosTxV1beta1SignerInfo>;
    /**
     * 
     * @type {CosmosTxV1beta1AuthInfoFee}
     * @memberof CosmosTxV1beta1AuthInfo
     */
    'fee'?: CosmosTxV1beta1AuthInfoFee;
}
/**
 * Fee is the fee and gas limit for the transaction. The first signer is the primary signer and the one which pays the fee. The fee can be calculated based on the cost of evaluating the body and doing signature verification of the signers. This can be estimated via simulation.
 * @export
 * @interface CosmosTxV1beta1AuthInfoFee
 */
export interface CosmosTxV1beta1AuthInfoFee {
    /**
     * 
     * @type {Array<InlineResponse2003Balances>}
     * @memberof CosmosTxV1beta1AuthInfoFee
     */
    'amount'?: Array<InlineResponse2003Balances>;
    /**
     * 
     * @type {string}
     * @memberof CosmosTxV1beta1AuthInfoFee
     */
    'gas_limit'?: string;
    /**
     * if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees. the payer must be a tx signer (and thus have signed this field in AuthInfo). setting this field does *not* change the ordering of required signers for the transaction.
     * @type {string}
     * @memberof CosmosTxV1beta1AuthInfoFee
     */
    'payer'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosTxV1beta1AuthInfoFee
     */
    'granter'?: string;
}
/**
 * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering  - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for the tx to be committed in a block.  - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for a CheckTx execution response only.  - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns immediately.
 * @export
 * @enum {string}
 */

export const CosmosTxV1beta1BroadcastMode = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
} as const;

export type CosmosTxV1beta1BroadcastMode = typeof CosmosTxV1beta1BroadcastMode[keyof typeof CosmosTxV1beta1BroadcastMode];


/**
 * BroadcastTxRequest is the request type for the Service.BroadcastTxRequest RPC method.
 * @export
 * @interface CosmosTxV1beta1BroadcastTxRequest
 */
export interface CosmosTxV1beta1BroadcastTxRequest {
    /**
     * tx_bytes is the raw transaction.
     * @type {string}
     * @memberof CosmosTxV1beta1BroadcastTxRequest
     */
    'tx_bytes'?: string;
    /**
     * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering  - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for the tx to be committed in a block.  - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for a CheckTx execution response only.  - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns immediately.
     * @type {string}
     * @memberof CosmosTxV1beta1BroadcastTxRequest
     */
    'mode'?: CosmosTxV1beta1BroadcastTxRequestModeEnum;
}

export const CosmosTxV1beta1BroadcastTxRequestModeEnum = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
} as const;

export type CosmosTxV1beta1BroadcastTxRequestModeEnum = typeof CosmosTxV1beta1BroadcastTxRequestModeEnum[keyof typeof CosmosTxV1beta1BroadcastTxRequestModeEnum];

/**
 * BroadcastTxResponse is the response type for the Service.BroadcastTx method.
 * @export
 * @interface CosmosTxV1beta1BroadcastTxResponse
 */
export interface CosmosTxV1beta1BroadcastTxResponse {
    /**
     * 
     * @type {InlineResponse20050TxResponse}
     * @memberof CosmosTxV1beta1BroadcastTxResponse
     */
    'tx_response'?: InlineResponse20050TxResponse;
}
/**
 * Fee includes the amount of coins paid in fees and the maximum gas to be used by the transaction. The ratio yields an effective \"gasprice\", which must be above some miminum to be accepted into the mempool.
 * @export
 * @interface CosmosTxV1beta1Fee
 */
export interface CosmosTxV1beta1Fee {
    /**
     * 
     * @type {Array<InlineResponse2003Balances>}
     * @memberof CosmosTxV1beta1Fee
     */
    'amount'?: Array<InlineResponse2003Balances>;
    /**
     * 
     * @type {string}
     * @memberof CosmosTxV1beta1Fee
     */
    'gas_limit'?: string;
    /**
     * if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees. the payer must be a tx signer (and thus have signed this field in AuthInfo). setting this field does *not* change the ordering of required signers for the transaction.
     * @type {string}
     * @memberof CosmosTxV1beta1Fee
     */
    'payer'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosTxV1beta1Fee
     */
    'granter'?: string;
}
/**
 * GetTxResponse is the response type for the Service.GetTx method.
 * @export
 * @interface CosmosTxV1beta1GetTxResponse
 */
export interface CosmosTxV1beta1GetTxResponse {
    /**
     * 
     * @type {CosmosTxV1beta1Tx}
     * @memberof CosmosTxV1beta1GetTxResponse
     */
    'tx'?: CosmosTxV1beta1Tx;
    /**
     * 
     * @type {InlineResponse20050TxResponse}
     * @memberof CosmosTxV1beta1GetTxResponse
     */
    'tx_response'?: InlineResponse20050TxResponse;
}
/**
 * GetTxsEventResponse is the response type for the Service.TxsByEvents RPC method.
 * @export
 * @interface CosmosTxV1beta1GetTxsEventResponse
 */
export interface CosmosTxV1beta1GetTxsEventResponse {
    /**
     * txs is the list of queried transactions.
     * @type {Array<CosmosTxV1beta1Tx>}
     * @memberof CosmosTxV1beta1GetTxsEventResponse
     */
    'txs'?: Array<CosmosTxV1beta1Tx>;
    /**
     * tx_responses is the list of queried TxResponses.
     * @type {Array<InlineResponse20050TxResponse>}
     * @memberof CosmosTxV1beta1GetTxsEventResponse
     */
    'tx_responses'?: Array<InlineResponse20050TxResponse>;
    /**
     * 
     * @type {InlineResponse20014Pagination}
     * @memberof CosmosTxV1beta1GetTxsEventResponse
     */
    'pagination'?: InlineResponse20014Pagination;
}
/**
 * ModeInfo describes the signing mode of a single or nested multisig signer.
 * @export
 * @interface CosmosTxV1beta1ModeInfo
 */
export interface CosmosTxV1beta1ModeInfo {
    /**
     * 
     * @type {SingleRepresentsASingleSigner}
     * @memberof CosmosTxV1beta1ModeInfo
     */
    'single'?: SingleRepresentsASingleSigner;
    /**
     * 
     * @type {CosmosTxV1beta1ModeInfoMulti}
     * @memberof CosmosTxV1beta1ModeInfo
     */
    'multi'?: CosmosTxV1beta1ModeInfoMulti;
}
/**
 * 
 * @export
 * @interface CosmosTxV1beta1ModeInfoMulti
 */
export interface CosmosTxV1beta1ModeInfoMulti {
    /**
     * 
     * @type {BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning}
     * @memberof CosmosTxV1beta1ModeInfoMulti
     */
    'bitarray'?: BitarraySpecifiesWhichKeysWithinTheMultisigAreSigning;
    /**
     * 
     * @type {Array<CosmosTxV1beta1ModeInfo>}
     * @memberof CosmosTxV1beta1ModeInfoMulti
     */
    'mode_infos'?: Array<CosmosTxV1beta1ModeInfo>;
}
/**
 * 
 * @export
 * @interface CosmosTxV1beta1ModeInfoSingle
 */
export interface CosmosTxV1beta1ModeInfoSingle {
    /**
     * SignMode represents a signing mode with its own security guarantees.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future
     * @type {string}
     * @memberof CosmosTxV1beta1ModeInfoSingle
     */
    'mode'?: CosmosTxV1beta1ModeInfoSingleModeEnum;
}

export const CosmosTxV1beta1ModeInfoSingleModeEnum = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON'
} as const;

export type CosmosTxV1beta1ModeInfoSingleModeEnum = typeof CosmosTxV1beta1ModeInfoSingleModeEnum[keyof typeof CosmosTxV1beta1ModeInfoSingleModeEnum];

/**
 * - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
 * @export
 * @enum {string}
 */

export const CosmosTxV1beta1OrderBy = {
    Unspecified: 'ORDER_BY_UNSPECIFIED',
    Asc: 'ORDER_BY_ASC',
    Desc: 'ORDER_BY_DESC'
} as const;

export type CosmosTxV1beta1OrderBy = typeof CosmosTxV1beta1OrderBy[keyof typeof CosmosTxV1beta1OrderBy];


/**
 * SignerInfo describes the public key and signing mode of a single top-level signer.
 * @export
 * @interface CosmosTxV1beta1SignerInfo
 */
export interface CosmosTxV1beta1SignerInfo {
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof CosmosTxV1beta1SignerInfo
     */
    'public_key'?: InlineResponse200Accounts;
    /**
     * 
     * @type {CosmosTxV1beta1ModeInfo}
     * @memberof CosmosTxV1beta1SignerInfo
     */
    'mode_info'?: CosmosTxV1beta1ModeInfo;
    /**
     * sequence is the sequence of the account, which describes the number of committed transactions signed by a given address. It is used to prevent replay attacks.
     * @type {string}
     * @memberof CosmosTxV1beta1SignerInfo
     */
    'sequence'?: string;
}
/**
 * SimulateRequest is the request type for the Service.Simulate RPC method.
 * @export
 * @interface CosmosTxV1beta1SimulateRequest
 */
export interface CosmosTxV1beta1SimulateRequest {
    /**
     * 
     * @type {CosmosTxV1beta1Tx}
     * @memberof CosmosTxV1beta1SimulateRequest
     */
    'tx'?: CosmosTxV1beta1Tx;
    /**
     * tx_bytes is the raw transaction.
     * @type {string}
     * @memberof CosmosTxV1beta1SimulateRequest
     */
    'tx_bytes'?: string;
}
/**
 * SimulateResponse is the response type for the Service.SimulateRPC method.
 * @export
 * @interface CosmosTxV1beta1SimulateResponse
 */
export interface CosmosTxV1beta1SimulateResponse {
    /**
     * 
     * @type {InlineResponse20049GasInfo}
     * @memberof CosmosTxV1beta1SimulateResponse
     */
    'gas_info'?: InlineResponse20049GasInfo;
    /**
     * 
     * @type {InlineResponse20049Result}
     * @memberof CosmosTxV1beta1SimulateResponse
     */
    'result'?: InlineResponse20049Result;
}
/**
 * Tx is the standard type used for broadcasting transactions.
 * @export
 * @interface CosmosTxV1beta1Tx
 */
export interface CosmosTxV1beta1Tx {
    /**
     * 
     * @type {BodyIsTheProcessableContentOfTheTransaction}
     * @memberof CosmosTxV1beta1Tx
     */
    'body'?: BodyIsTheProcessableContentOfTheTransaction;
    /**
     * 
     * @type {CosmosTxV1beta1AuthInfo}
     * @memberof CosmosTxV1beta1Tx
     */
    'auth_info'?: CosmosTxV1beta1AuthInfo;
    /**
     * signatures is a list of signatures that matches the length and order of AuthInfo\'s signer_infos to allow connecting signature meta information like public key and signing mode by position.
     * @type {Array<string>}
     * @memberof CosmosTxV1beta1Tx
     */
    'signatures'?: Array<string>;
}
/**
 * TxBody is the body of a transaction that all signers sign over.
 * @export
 * @interface CosmosTxV1beta1TxBody
 */
export interface CosmosTxV1beta1TxBody {
    /**
     * messages is a list of messages to be executed. The required signers of those messages define the number and order of elements in AuthInfo\'s signer_infos and Tx\'s signatures. Each required signer address is added to the list only the first time it occurs. By convention, the first required signer (usually from the first message) is referred to as the primary signer and pays the fee for the whole transaction.
     * @type {Array<InlineResponse200Accounts>}
     * @memberof CosmosTxV1beta1TxBody
     */
    'messages'?: Array<InlineResponse200Accounts>;
    /**
     * memo is any arbitrary note/comment to be added to the transaction. WARNING: in clients, any publicly exposed text should not be called memo, but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122).
     * @type {string}
     * @memberof CosmosTxV1beta1TxBody
     */
    'memo'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosTxV1beta1TxBody
     */
    'timeout_height'?: string;
    /**
     * 
     * @type {Array<InlineResponse200Accounts>}
     * @memberof CosmosTxV1beta1TxBody
     */
    'extension_options'?: Array<InlineResponse200Accounts>;
    /**
     * 
     * @type {Array<InlineResponse200Accounts>}
     * @memberof CosmosTxV1beta1TxBody
     */
    'non_critical_extension_options'?: Array<InlineResponse200Accounts>;
}
/**
 * ModuleVersion specifies a module and its consensus version.
 * @export
 * @interface CosmosUpgradeV1beta1ModuleVersion
 */
export interface CosmosUpgradeV1beta1ModuleVersion {
    /**
     * 
     * @type {string}
     * @memberof CosmosUpgradeV1beta1ModuleVersion
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosUpgradeV1beta1ModuleVersion
     */
    'version'?: string;
}
/**
 * Plan specifies information about a planned upgrade and when it should occur.
 * @export
 * @interface CosmosUpgradeV1beta1Plan
 */
export interface CosmosUpgradeV1beta1Plan {
    /**
     * Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special \"on-upgrade\" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.
     * @type {string}
     * @memberof CosmosUpgradeV1beta1Plan
     */
    'name'?: string;
    /**
     * Deprecated: Time based upgrades have been deprecated. Time based upgrade logic has been removed from the SDK. If this field is not empty, an error will be thrown.
     * @type {string}
     * @memberof CosmosUpgradeV1beta1Plan
     */
    'time'?: string;
    /**
     * The height at which the upgrade must be performed. Only used if Time is not set.
     * @type {string}
     * @memberof CosmosUpgradeV1beta1Plan
     */
    'height'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosUpgradeV1beta1Plan
     */
    'info'?: string;
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof CosmosUpgradeV1beta1Plan
     */
    'upgraded_client_state'?: InlineResponse200Accounts;
}
/**
 * QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC method.
 * @export
 * @interface CosmosUpgradeV1beta1QueryAppliedPlanResponse
 */
export interface CosmosUpgradeV1beta1QueryAppliedPlanResponse {
    /**
     * height is the block height at which the plan was applied.
     * @type {string}
     * @memberof CosmosUpgradeV1beta1QueryAppliedPlanResponse
     */
    'height'?: string;
}
/**
 * QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC method.
 * @export
 * @interface CosmosUpgradeV1beta1QueryCurrentPlanResponse
 */
export interface CosmosUpgradeV1beta1QueryCurrentPlanResponse {
    /**
     * 
     * @type {InlineResponse20052Plan}
     * @memberof CosmosUpgradeV1beta1QueryCurrentPlanResponse
     */
    'plan'?: InlineResponse20052Plan;
}
/**
 * QueryModuleVersionsResponse is the response type for the Query/ModuleVersions RPC method.
 * @export
 * @interface CosmosUpgradeV1beta1QueryModuleVersionsResponse
 */
export interface CosmosUpgradeV1beta1QueryModuleVersionsResponse {
    /**
     * module_versions is a list of module names with their consensus versions.
     * @type {Array<InlineResponse20053ModuleVersions>}
     * @memberof CosmosUpgradeV1beta1QueryModuleVersionsResponse
     */
    'module_versions'?: Array<InlineResponse20053ModuleVersions>;
}
/**
 * QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState RPC method.
 * @export
 * @interface CosmosUpgradeV1beta1QueryUpgradedConsensusStateResponse
 */
export interface CosmosUpgradeV1beta1QueryUpgradedConsensusStateResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmosUpgradeV1beta1QueryUpgradedConsensusStateResponse
     */
    'upgraded_consensus_state'?: string;
}
/**
 * 
 * @export
 * @interface DataContainsTheSetOfTransactionsIncludedInTheBlock
 */
export interface DataContainsTheSetOfTransactionsIncludedInTheBlock {
    /**
     * Txs that will be applied by state @ block.Height+1. NOTE: not all txs here are valid.  We\'re just agreeing on the order first. This means that block.AppHash does not include these txs.
     * @type {Array<string>}
     * @memberof DataContainsTheSetOfTransactionsIncludedInTheBlock
     */
    'txs'?: Array<string>;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface GoogleProtobufAny
 */
export interface GoogleProtobufAny {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    'type_url'?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    'value'?: string;
}
/**
 * allowance is a allowance granted for grantee by granter.
 * @export
 * @interface GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext
 */
export interface GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext {
    /**
     * granter is the address of the user granting an allowance of their funds.
     * @type {string}
     * @memberof GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext
     */
    'granter'?: string;
    /**
     * grantee is the address of the user being granted an allowance of another user\'s funds.
     * @type {string}
     * @memberof GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext
     */
    'grantee'?: string;
    /**
     * 
     * @type {GrantIsStoredInTheKVStoreToRecordAGrantWithFullContextAllowance}
     * @memberof GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext
     */
    'allowance'?: GrantIsStoredInTheKVStoreToRecordAGrantWithFullContextAllowance;
}
/**
 * 
 * @export
 * @interface GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext1
 */
export interface GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext1 {
    /**
     * granter is the address of the user granting an allowance of their funds.
     * @type {string}
     * @memberof GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext1
     */
    'granter'?: string;
    /**
     * grantee is the address of the user being granted an allowance of another user\'s funds.
     * @type {string}
     * @memberof GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext1
     */
    'grantee'?: string;
    /**
     * 
     * @type {GrantIsStoredInTheKVStoreToRecordAGrantWithFullContextAllowance}
     * @memberof GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext1
     */
    'allowance'?: GrantIsStoredInTheKVStoreToRecordAGrantWithFullContextAllowance;
}
/**
 * allowance can be any of basic and filtered fee allowance.
 * @export
 * @interface GrantIsStoredInTheKVStoreToRecordAGrantWithFullContextAllowance
 */
export interface GrantIsStoredInTheKVStoreToRecordAGrantWithFullContextAllowance {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof GrantIsStoredInTheKVStoreToRecordAGrantWithFullContextAllowance
     */
    'type_url'?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof GrantIsStoredInTheKVStoreToRecordAGrantWithFullContextAllowance
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface GrpcGatewayRuntimeError
 */
export interface GrpcGatewayRuntimeError {
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeError
     */
    'error'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcGatewayRuntimeError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeError
     */
    'message'?: string;
    /**
     * 
     * @type {Array<InlineResponse200Accounts>}
     * @memberof GrpcGatewayRuntimeError
     */
    'details'?: Array<InlineResponse200Accounts>;
}
/**
 * BroadcastTxRequest is the request type for the Service.BroadcastTxRequest RPC method.
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * tx_bytes is the raw transaction.
     * @type {string}
     * @memberof InlineObject
     */
    'tx_bytes'?: string;
    /**
     * BroadcastMode specifies the broadcast mode for the TxService.Broadcast RPC method.   - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering  - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for the tx to be committed in a block.  - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for a CheckTx execution response only.  - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns immediately.
     * @type {string}
     * @memberof InlineObject
     */
    'mode'?: InlineObjectModeEnum;
}

export const InlineObjectModeEnum = {
    Unspecified: 'BROADCAST_MODE_UNSPECIFIED',
    Block: 'BROADCAST_MODE_BLOCK',
    Sync: 'BROADCAST_MODE_SYNC',
    Async: 'BROADCAST_MODE_ASYNC'
} as const;

export type InlineObjectModeEnum = typeof InlineObjectModeEnum[keyof typeof InlineObjectModeEnum];

/**
 * QueryAccountsResponse is the response type for the Query/Accounts RPC method.
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {Array<InlineResponse200Accounts>}
     * @memberof InlineResponse200
     */
    'accounts'?: Array<InlineResponse200Accounts>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse200
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryAccountResponse is the response type for the Query/Account RPC method.
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof InlineResponse2001
     */
    'account'?: InlineResponse200Accounts;
}
/**
 * GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method.
 * @export
 * @interface InlineResponse20010
 */
export interface InlineResponse20010 {
    /**
     * 
     * @type {BlockID}
     * @memberof InlineResponse20010
     */
    'block_id'?: BlockID;
    /**
     * 
     * @type {InlineResponse20010Block}
     * @memberof InlineResponse20010
     */
    'block'?: InlineResponse20010Block;
}
/**
 * 
 * @export
 * @interface InlineResponse20010Block
 */
export interface InlineResponse20010Block {
    /**
     * 
     * @type {InlineResponse20010BlockHeader}
     * @memberof InlineResponse20010Block
     */
    'header'?: InlineResponse20010BlockHeader;
    /**
     * 
     * @type {DataContainsTheSetOfTransactionsIncludedInTheBlock}
     * @memberof InlineResponse20010Block
     */
    'data'?: DataContainsTheSetOfTransactionsIncludedInTheBlock;
    /**
     * 
     * @type {InlineResponse20010BlockEvidence}
     * @memberof InlineResponse20010Block
     */
    'evidence'?: InlineResponse20010BlockEvidence;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit}
     * @memberof InlineResponse20010Block
     */
    'last_commit'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit;
}
/**
 * 
 * @export
 * @interface InlineResponse20010BlockEvidence
 */
export interface InlineResponse20010BlockEvidence {
    /**
     * 
     * @type {Array<InlineResponse20010BlockEvidenceEvidence>}
     * @memberof InlineResponse20010BlockEvidence
     */
    'evidence'?: Array<InlineResponse20010BlockEvidenceEvidence>;
}
/**
 * DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
 * @export
 * @interface InlineResponse20010BlockEvidenceDuplicateVoteEvidence
 */
export interface InlineResponse20010BlockEvidenceDuplicateVoteEvidence {
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidence
     */
    'vote_a'?: InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidence
     */
    'vote_b'?: InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidence
     */
    'total_voting_power'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidence
     */
    'validator_power'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidence
     */
    'timestamp'?: string;
}
/**
 * Vote represents a prevote, precommit, or commit vote from validators for consensus.
 * @export
 * @interface InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA
 */
export interface InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA {
    /**
     * SignedMsgType is a type of signed message in the consensus.   - SIGNED_MSG_TYPE_PREVOTE: Votes  - SIGNED_MSG_TYPE_PROPOSAL: Proposals
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA
     */
    'type'?: InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteATypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA
     */
    'height'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA
     */
    'round'?: number;
    /**
     * 
     * @type {BlockID}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA
     */
    'block_id'?: BlockID;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA
     */
    'validator_address'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA
     */
    'validator_index'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA
     */
    'signature'?: string;
}

export const InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteATypeEnum = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
} as const;

export type InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteATypeEnum = typeof InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteATypeEnum[keyof typeof InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteATypeEnum];

/**
 * 
 * @export
 * @interface InlineResponse20010BlockEvidenceEvidence
 */
export interface InlineResponse20010BlockEvidenceEvidence {
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceDuplicateVoteEvidence}
     * @memberof InlineResponse20010BlockEvidenceEvidence
     */
    'duplicate_vote_evidence'?: InlineResponse20010BlockEvidenceDuplicateVoteEvidence;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidence}
     * @memberof InlineResponse20010BlockEvidenceEvidence
     */
    'light_client_attack_evidence'?: InlineResponse20010BlockEvidenceLightClientAttackEvidence;
}
/**
 * LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
 * @export
 * @interface InlineResponse20010BlockEvidenceLightClientAttackEvidence
 */
export interface InlineResponse20010BlockEvidenceLightClientAttackEvidence {
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlock}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidence
     */
    'conflicting_block'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlock;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidence
     */
    'common_height'?: string;
    /**
     * 
     * @type {Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidence
     */
    'byzantine_validators'?: Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidence
     */
    'total_voting_power'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidence
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlock
 */
export interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlock {
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlock
     */
    'signed_header'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlock
     */
    'validator_set'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet;
}
/**
 * 
 * @export
 * @interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader
 */
export interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader {
    /**
     * 
     * @type {InlineResponse20010BlockHeader}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader
     */
    'header'?: InlineResponse20010BlockHeader;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader
     */
    'commit'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit;
}
/**
 * Commit contains the evidence that a block was committed by a set of validators.
 * @export
 * @interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit
 */
export interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit
     */
    'height'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit
     */
    'round'?: number;
    /**
     * 
     * @type {BlockID}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit
     */
    'block_id'?: BlockID;
    /**
     * 
     * @type {Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures>}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit
     */
    'signatures'?: Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures>;
}
/**
 * CommitSig is a part of the Vote included in a Commit.
 * @export
 * @interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures
 */
export interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures
     */
    'block_id_flag'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesBlockIdFlagEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures
     */
    'validator_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures
     */
    'signature'?: string;
}

export const InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesBlockIdFlagEnum = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
} as const;

export type InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesBlockIdFlagEnum = typeof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesBlockIdFlagEnum[keyof typeof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignaturesBlockIdFlagEnum];

/**
 * 
 * @export
 * @interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet
 */
export interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet {
    /**
     * 
     * @type {Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet
     */
    'validators'?: Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet
     */
    'proposer'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet
     */
    'total_voting_power'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators
 */
export interface InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators
     */
    'address'?: string;
    /**
     * 
     * @type {PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators
     */
    'pub_key'?: PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators
     */
    'voting_power'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators
     */
    'proposer_priority'?: string;
}
/**
 * Header defines the structure of a Tendermint block header.
 * @export
 * @interface InlineResponse20010BlockHeader
 */
export interface InlineResponse20010BlockHeader {
    /**
     * 
     * @type {BasicBlockInfo}
     * @memberof InlineResponse20010BlockHeader
     */
    'version'?: BasicBlockInfo;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'chain_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'height'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'time'?: string;
    /**
     * 
     * @type {BlockID}
     * @memberof InlineResponse20010BlockHeader
     */
    'last_block_id'?: BlockID;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'last_commit_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'data_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'validators_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'next_validators_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'consensus_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'app_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'last_results_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'evidence_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20010BlockHeader
     */
    'proposer_address'?: string;
}
/**
 * GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method.
 * @export
 * @interface InlineResponse20011
 */
export interface InlineResponse20011 {
    /**
     * 
     * @type {BlockID}
     * @memberof InlineResponse20011
     */
    'block_id'?: BlockID;
    /**
     * 
     * @type {InlineResponse20010Block}
     * @memberof InlineResponse20011
     */
    'block'?: InlineResponse20010Block;
}
/**
 * GetNodeInfoResponse is the request type for the Query/GetNodeInfo RPC method.
 * @export
 * @interface InlineResponse20012
 */
export interface InlineResponse20012 {
    /**
     * 
     * @type {InlineResponse20012DefaultNodeInfo}
     * @memberof InlineResponse20012
     */
    'default_node_info'?: InlineResponse20012DefaultNodeInfo;
    /**
     * 
     * @type {InlineResponse20012ApplicationVersion}
     * @memberof InlineResponse20012
     */
    'application_version'?: InlineResponse20012ApplicationVersion;
}
/**
 * VersionInfo is the type for the GetNodeInfoResponse message.
 * @export
 * @interface InlineResponse20012ApplicationVersion
 */
export interface InlineResponse20012ApplicationVersion {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ApplicationVersion
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ApplicationVersion
     */
    'app_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ApplicationVersion
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ApplicationVersion
     */
    'git_commit'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ApplicationVersion
     */
    'build_tags'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ApplicationVersion
     */
    'go_version'?: string;
    /**
     * 
     * @type {Array<ModuleIsTheTypeForVersionInfo>}
     * @memberof InlineResponse20012ApplicationVersion
     */
    'build_deps'?: Array<ModuleIsTheTypeForVersionInfo>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012ApplicationVersion
     */
    'cosmos_sdk_version'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20012DefaultNodeInfo
 */
export interface InlineResponse20012DefaultNodeInfo {
    /**
     * 
     * @type {InlineResponse20012DefaultNodeInfoProtocolVersion}
     * @memberof InlineResponse20012DefaultNodeInfo
     */
    'protocol_version'?: InlineResponse20012DefaultNodeInfoProtocolVersion;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfo
     */
    'default_node_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfo
     */
    'listen_addr'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfo
     */
    'network'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfo
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfo
     */
    'channels'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfo
     */
    'moniker'?: string;
    /**
     * 
     * @type {InlineResponse20012DefaultNodeInfoOther}
     * @memberof InlineResponse20012DefaultNodeInfo
     */
    'other'?: InlineResponse20012DefaultNodeInfoOther;
}
/**
 * 
 * @export
 * @interface InlineResponse20012DefaultNodeInfoOther
 */
export interface InlineResponse20012DefaultNodeInfoOther {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfoOther
     */
    'tx_index'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfoOther
     */
    'rpc_address'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponse20012DefaultNodeInfoProtocolVersion
 */
export interface InlineResponse20012DefaultNodeInfoProtocolVersion {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfoProtocolVersion
     */
    'p2p'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfoProtocolVersion
     */
    'block'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20012DefaultNodeInfoProtocolVersion
     */
    'app'?: string;
}
/**
 * GetSyncingResponse is the response type for the Query/GetSyncing RPC method.
 * @export
 * @interface InlineResponse20013
 */
export interface InlineResponse20013 {
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse20013
     */
    'syncing'?: boolean;
}
/**
 * GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method.
 * @export
 * @interface InlineResponse20014
 */
export interface InlineResponse20014 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20014
     */
    'block_height'?: string;
    /**
     * 
     * @type {Array<InlineResponse20014Validators>}
     * @memberof InlineResponse20014
     */
    'validators'?: Array<InlineResponse20014Validators>;
    /**
     * 
     * @type {InlineResponse20014Pagination}
     * @memberof InlineResponse20014
     */
    'pagination'?: InlineResponse20014Pagination;
}
/**
 * pagination defines an pagination for the response.
 * @export
 * @interface InlineResponse20014Pagination
 */
export interface InlineResponse20014Pagination {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20014Pagination
     */
    'next_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20014Pagination
     */
    'total'?: string;
}
/**
 * Validator is the type for the validator-set.
 * @export
 * @interface InlineResponse20014Validators
 */
export interface InlineResponse20014Validators {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20014Validators
     */
    'address'?: string;
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof InlineResponse20014Validators
     */
    'pub_key'?: InlineResponse200Accounts;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20014Validators
     */
    'voting_power'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20014Validators
     */
    'proposer_priority'?: string;
}
/**
 * GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method.
 * @export
 * @interface InlineResponse20015
 */
export interface InlineResponse20015 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20015
     */
    'block_height'?: string;
    /**
     * 
     * @type {Array<InlineResponse20014Validators>}
     * @memberof InlineResponse20015
     */
    'validators'?: Array<InlineResponse20014Validators>;
    /**
     * 
     * @type {InlineResponse20014Pagination}
     * @memberof InlineResponse20015
     */
    'pagination'?: InlineResponse20014Pagination;
}
/**
 * QueryCommunityPoolResponse is the response type for the Query/CommunityPool RPC method.
 * @export
 * @interface InlineResponse20016
 */
export interface InlineResponse20016 {
    /**
     * pool defines community pool\'s coins.
     * @type {Array<InlineResponse20016Pool>}
     * @memberof InlineResponse20016
     */
    'pool'?: Array<InlineResponse20016Pool>;
}
/**
 * DecCoin defines a token with a denomination and a decimal amount.  NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto.
 * @export
 * @interface InlineResponse20016Pool
 */
export interface InlineResponse20016Pool {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016Pool
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20016Pool
     */
    'amount'?: string;
}
/**
 * QueryDelegationTotalRewardsResponse is the response type for the Query/DelegationTotalRewards RPC method.
 * @export
 * @interface InlineResponse20017
 */
export interface InlineResponse20017 {
    /**
     * rewards defines all the rewards accrued by a delegator.
     * @type {Array<InlineResponse20017Rewards>}
     * @memberof InlineResponse20017
     */
    'rewards'?: Array<InlineResponse20017Rewards>;
    /**
     * total defines the sum of all the rewards.
     * @type {Array<InlineResponse20016Pool>}
     * @memberof InlineResponse20017
     */
    'total'?: Array<InlineResponse20016Pool>;
}
/**
 * DelegationDelegatorReward represents the properties of a delegator\'s delegation reward.
 * @export
 * @interface InlineResponse20017Rewards
 */
export interface InlineResponse20017Rewards {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20017Rewards
     */
    'validator_address'?: string;
    /**
     * 
     * @type {Array<InlineResponse20016Pool>}
     * @memberof InlineResponse20017Rewards
     */
    'reward'?: Array<InlineResponse20016Pool>;
}
/**
 * QueryDelegationRewardsResponse is the response type for the Query/DelegationRewards RPC method.
 * @export
 * @interface InlineResponse20018
 */
export interface InlineResponse20018 {
    /**
     * rewards defines the rewards accrued by a delegation.
     * @type {Array<InlineResponse20016Pool>}
     * @memberof InlineResponse20018
     */
    'rewards'?: Array<InlineResponse20016Pool>;
}
/**
 * QueryDelegatorValidatorsResponse is the response type for the Query/DelegatorValidators RPC method.
 * @export
 * @interface InlineResponse20019
 */
export interface InlineResponse20019 {
    /**
     * validators defines the validators a delegator is delegating for.
     * @type {Array<string>}
     * @memberof InlineResponse20019
     */
    'validators'?: Array<string>;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {InlineResponse2002Params}
     * @memberof InlineResponse2002
     */
    'params'?: InlineResponse2002Params;
}
/**
 * QueryDelegatorWithdrawAddressResponse is the response type for the Query/DelegatorWithdrawAddress RPC method.
 * @export
 * @interface InlineResponse20020
 */
export interface InlineResponse20020 {
    /**
     * withdraw_address defines the delegator address to query for.
     * @type {string}
     * @memberof InlineResponse20020
     */
    'withdraw_address'?: string;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20021
 */
export interface InlineResponse20021 {
    /**
     * 
     * @type {InlineResponse20021Params}
     * @memberof InlineResponse20021
     */
    'params'?: InlineResponse20021Params;
}
/**
 * params defines the parameters of the module.
 * @export
 * @interface InlineResponse20021Params
 */
export interface InlineResponse20021Params {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20021Params
     */
    'community_tax'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20021Params
     */
    'base_proposer_reward'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20021Params
     */
    'bonus_proposer_reward'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse20021Params
     */
    'withdraw_addr_enabled'?: boolean;
}
/**
 * QueryValidatorOutstandingRewardsResponse is the response type for the Query/ValidatorOutstandingRewards RPC method.
 * @export
 * @interface InlineResponse20022
 */
export interface InlineResponse20022 {
    /**
     * 
     * @type {InlineResponse20022Rewards}
     * @memberof InlineResponse20022
     */
    'rewards'?: InlineResponse20022Rewards;
}
/**
 * ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards for a validator inexpensive to track, allows simple sanity checks.
 * @export
 * @interface InlineResponse20022Rewards
 */
export interface InlineResponse20022Rewards {
    /**
     * 
     * @type {Array<InlineResponse20016Pool>}
     * @memberof InlineResponse20022Rewards
     */
    'rewards'?: Array<InlineResponse20016Pool>;
}
/**
 * QueryValidatorSlashesResponse is the response type for the Query/ValidatorSlashes RPC method.
 * @export
 * @interface InlineResponse20023
 */
export interface InlineResponse20023 {
    /**
     * slashes defines the slashes the validator received.
     * @type {Array<InlineResponse20023Slashes>}
     * @memberof InlineResponse20023
     */
    'slashes'?: Array<InlineResponse20023Slashes>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20023
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * ValidatorSlashEvent represents a validator slash event. Height is implicit within the store key. This is needed to calculate appropriate amount of staking tokens for delegations which are withdrawn after a slash has occurred.
 * @export
 * @interface InlineResponse20023Slashes
 */
export interface InlineResponse20023Slashes {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20023Slashes
     */
    'validator_period'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20023Slashes
     */
    'fraction'?: string;
}
/**
 * QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC method.
 * @export
 * @interface InlineResponse20024
 */
export interface InlineResponse20024 {
    /**
     * evidence returns all evidences.
     * @type {Array<InlineResponse200Accounts>}
     * @memberof InlineResponse20024
     */
    'evidence'?: Array<InlineResponse200Accounts>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20024
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryEvidenceResponse is the response type for the Query/Evidence RPC method.
 * @export
 * @interface InlineResponse20025
 */
export interface InlineResponse20025 {
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof InlineResponse20025
     */
    'evidence'?: InlineResponse200Accounts;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20026
 */
export interface InlineResponse20026 {
    /**
     * 
     * @type {InlineResponse20026VotingParams}
     * @memberof InlineResponse20026
     */
    'voting_params'?: InlineResponse20026VotingParams;
    /**
     * 
     * @type {InlineResponse20026DepositParams}
     * @memberof InlineResponse20026
     */
    'deposit_params'?: InlineResponse20026DepositParams;
    /**
     * 
     * @type {InlineResponse20026TallyParams}
     * @memberof InlineResponse20026
     */
    'tally_params'?: InlineResponse20026TallyParams;
}
/**
 * deposit_params defines the parameters related to deposit.
 * @export
 * @interface InlineResponse20026DepositParams
 */
export interface InlineResponse20026DepositParams {
    /**
     * Minimum deposit for a proposal to enter voting period.
     * @type {Array<InlineResponse2003Balances>}
     * @memberof InlineResponse20026DepositParams
     */
    'min_deposit'?: Array<InlineResponse2003Balances>;
    /**
     * Maximum period for Atom holders to deposit on a proposal. Initial value: 2  months.
     * @type {string}
     * @memberof InlineResponse20026DepositParams
     */
    'max_deposit_period'?: string;
}
/**
 * tally_params defines the parameters related to tally.
 * @export
 * @interface InlineResponse20026TallyParams
 */
export interface InlineResponse20026TallyParams {
    /**
     * Minimum percentage of total stake needed to vote for a result to be  considered valid.
     * @type {string}
     * @memberof InlineResponse20026TallyParams
     */
    'quorum'?: string;
    /**
     * Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.
     * @type {string}
     * @memberof InlineResponse20026TallyParams
     */
    'threshold'?: string;
    /**
     * Minimum value of Veto votes to Total votes ratio for proposal to be  vetoed. Default value: 1/3.
     * @type {string}
     * @memberof InlineResponse20026TallyParams
     */
    'veto_threshold'?: string;
}
/**
 * voting_params defines the parameters related to voting.
 * @export
 * @interface InlineResponse20026VotingParams
 */
export interface InlineResponse20026VotingParams {
    /**
     * Length of the voting period.
     * @type {string}
     * @memberof InlineResponse20026VotingParams
     */
    'voting_period'?: string;
}
/**
 * QueryProposalsResponse is the response type for the Query/Proposals RPC method.
 * @export
 * @interface InlineResponse20027
 */
export interface InlineResponse20027 {
    /**
     * 
     * @type {Array<InlineResponse20027Proposals>}
     * @memberof InlineResponse20027
     */
    'proposals'?: Array<InlineResponse20027Proposals>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20027
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * TallyResult defines a standard tally for a governance proposal.
 * @export
 * @interface InlineResponse20027FinalTallyResult
 */
export interface InlineResponse20027FinalTallyResult {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20027FinalTallyResult
     */
    'yes'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20027FinalTallyResult
     */
    'abstain'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20027FinalTallyResult
     */
    'no'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20027FinalTallyResult
     */
    'no_with_veto'?: string;
}
/**
 * Proposal defines the core field members of a governance proposal.
 * @export
 * @interface InlineResponse20027Proposals
 */
export interface InlineResponse20027Proposals {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20027Proposals
     */
    'proposal_id'?: string;
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof InlineResponse20027Proposals
     */
    'content'?: InlineResponse200Accounts;
    /**
     * ProposalStatus enumerates the valid statuses of a proposal.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @type {string}
     * @memberof InlineResponse20027Proposals
     */
    'status'?: InlineResponse20027ProposalsStatusEnum;
    /**
     * 
     * @type {InlineResponse20027FinalTallyResult}
     * @memberof InlineResponse20027Proposals
     */
    'final_tally_result'?: InlineResponse20027FinalTallyResult;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20027Proposals
     */
    'submit_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20027Proposals
     */
    'deposit_end_time'?: string;
    /**
     * 
     * @type {Array<InlineResponse2003Balances>}
     * @memberof InlineResponse20027Proposals
     */
    'total_deposit'?: Array<InlineResponse2003Balances>;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20027Proposals
     */
    'voting_start_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20027Proposals
     */
    'voting_end_time'?: string;
}

export const InlineResponse20027ProposalsStatusEnum = {
    Unspecified: 'PROPOSAL_STATUS_UNSPECIFIED',
    DepositPeriod: 'PROPOSAL_STATUS_DEPOSIT_PERIOD',
    VotingPeriod: 'PROPOSAL_STATUS_VOTING_PERIOD',
    Passed: 'PROPOSAL_STATUS_PASSED',
    Rejected: 'PROPOSAL_STATUS_REJECTED',
    Failed: 'PROPOSAL_STATUS_FAILED'
} as const;

export type InlineResponse20027ProposalsStatusEnum = typeof InlineResponse20027ProposalsStatusEnum[keyof typeof InlineResponse20027ProposalsStatusEnum];

/**
 * QueryProposalResponse is the response type for the Query/Proposal RPC method.
 * @export
 * @interface InlineResponse20028
 */
export interface InlineResponse20028 {
    /**
     * 
     * @type {InlineResponse20027Proposals}
     * @memberof InlineResponse20028
     */
    'proposal'?: InlineResponse20027Proposals;
}
/**
 * QueryDepositsResponse is the response type for the Query/Deposits RPC method.
 * @export
 * @interface InlineResponse20029
 */
export interface InlineResponse20029 {
    /**
     * 
     * @type {Array<InlineResponse20029Deposits>}
     * @memberof InlineResponse20029
     */
    'deposits'?: Array<InlineResponse20029Deposits>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20029
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * Deposit defines an amount deposited by an account address to an active proposal.
 * @export
 * @interface InlineResponse20029Deposits
 */
export interface InlineResponse20029Deposits {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20029Deposits
     */
    'proposal_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20029Deposits
     */
    'depositor'?: string;
    /**
     * 
     * @type {Array<InlineResponse2003Balances>}
     * @memberof InlineResponse20029Deposits
     */
    'amount'?: Array<InlineResponse2003Balances>;
}
/**
 * params defines the parameters of the module.
 * @export
 * @interface InlineResponse2002Params
 */
export interface InlineResponse2002Params {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Params
     */
    'max_memo_characters'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Params
     */
    'tx_sig_limit'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Params
     */
    'tx_size_cost_per_byte'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Params
     */
    'sig_verify_cost_ed25519'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2002Params
     */
    'sig_verify_cost_secp256k1'?: string;
}
/**
 * QueryAllBalancesResponse is the response type for the Query/AllBalances RPC method.
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * balances is the balances of all the coins.
     * @type {Array<InlineResponse2003Balances>}
     * @memberof InlineResponse2003
     */
    'balances'?: Array<InlineResponse2003Balances>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse2003
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * QueryDepositResponse is the response type for the Query/Deposit RPC method.
 * @export
 * @interface InlineResponse20030
 */
export interface InlineResponse20030 {
    /**
     * 
     * @type {InlineResponse20029Deposits}
     * @memberof InlineResponse20030
     */
    'deposit'?: InlineResponse20029Deposits;
}
/**
 * QueryTallyResultResponse is the response type for the Query/Tally RPC method.
 * @export
 * @interface InlineResponse20031
 */
export interface InlineResponse20031 {
    /**
     * 
     * @type {InlineResponse20027FinalTallyResult}
     * @memberof InlineResponse20031
     */
    'tally'?: InlineResponse20027FinalTallyResult;
}
/**
 * QueryVotesResponse is the response type for the Query/Votes RPC method.
 * @export
 * @interface InlineResponse20032
 */
export interface InlineResponse20032 {
    /**
     * votes defined the queried votes.
     * @type {Array<InlineResponse20032Votes>}
     * @memberof InlineResponse20032
     */
    'votes'?: Array<InlineResponse20032Votes>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20032
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * WeightedVoteOption defines a unit of vote for vote split.
 * @export
 * @interface InlineResponse20032Options
 */
export interface InlineResponse20032Options {
    /**
     * VoteOption enumerates the valid vote options for a given governance proposal.   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.  - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.  - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.  - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.  - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
     * @type {string}
     * @memberof InlineResponse20032Options
     */
    'option'?: InlineResponse20032OptionsOptionEnum;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20032Options
     */
    'weight'?: string;
}

export const InlineResponse20032OptionsOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
} as const;

export type InlineResponse20032OptionsOptionEnum = typeof InlineResponse20032OptionsOptionEnum[keyof typeof InlineResponse20032OptionsOptionEnum];

/**
 * Vote defines a vote on a governance proposal. A Vote consists of a proposal ID, the voter, and the vote option.
 * @export
 * @interface InlineResponse20032Votes
 */
export interface InlineResponse20032Votes {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20032Votes
     */
    'proposal_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20032Votes
     */
    'voter'?: string;
    /**
     * Deprecated: Prefer to use `options` instead. This field is set in queries if and only if `len(options) == 1` and that option has weight 1. In all other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
     * @type {string}
     * @memberof InlineResponse20032Votes
     */
    'option'?: InlineResponse20032VotesOptionEnum;
    /**
     * 
     * @type {Array<InlineResponse20032Options>}
     * @memberof InlineResponse20032Votes
     */
    'options'?: Array<InlineResponse20032Options>;
}

export const InlineResponse20032VotesOptionEnum = {
    Unspecified: 'VOTE_OPTION_UNSPECIFIED',
    Yes: 'VOTE_OPTION_YES',
    Abstain: 'VOTE_OPTION_ABSTAIN',
    No: 'VOTE_OPTION_NO',
    NoWithVeto: 'VOTE_OPTION_NO_WITH_VETO'
} as const;

export type InlineResponse20032VotesOptionEnum = typeof InlineResponse20032VotesOptionEnum[keyof typeof InlineResponse20032VotesOptionEnum];

/**
 * QueryVoteResponse is the response type for the Query/Vote RPC method.
 * @export
 * @interface InlineResponse20033
 */
export interface InlineResponse20033 {
    /**
     * 
     * @type {InlineResponse20032Votes}
     * @memberof InlineResponse20033
     */
    'vote'?: InlineResponse20032Votes;
}
/**
 * QueryAnnualProvisionsResponse is the response type for the Query/AnnualProvisions RPC method.
 * @export
 * @interface InlineResponse20034
 */
export interface InlineResponse20034 {
    /**
     * annual_provisions is the current minting annual provisions value.
     * @type {string}
     * @memberof InlineResponse20034
     */
    'annual_provisions'?: string;
}
/**
 * QueryInflationResponse is the response type for the Query/Inflation RPC method.
 * @export
 * @interface InlineResponse20035
 */
export interface InlineResponse20035 {
    /**
     * inflation is the current minting inflation value.
     * @type {string}
     * @memberof InlineResponse20035
     */
    'inflation'?: string;
}
/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20036
 */
export interface InlineResponse20036 {
    /**
     * 
     * @type {InlineResponse20036Params}
     * @memberof InlineResponse20036
     */
    'params'?: InlineResponse20036Params;
}
/**
 * params defines the parameters of the module.
 * @export
 * @interface InlineResponse20036Params
 */
export interface InlineResponse20036Params {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20036Params
     */
    'mint_denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20036Params
     */
    'inflation_rate_change'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20036Params
     */
    'inflation_max'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20036Params
     */
    'inflation_min'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20036Params
     */
    'goal_bonded'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20036Params
     */
    'blocks_per_year'?: string;
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20037
 */
export interface InlineResponse20037 {
    /**
     * 
     * @type {InlineResponse20037Param}
     * @memberof InlineResponse20037
     */
    'param'?: InlineResponse20037Param;
}
/**
 * param defines the queried parameter.
 * @export
 * @interface InlineResponse20037Param
 */
export interface InlineResponse20037Param {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20037Param
     */
    'subspace'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20037Param
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20037Param
     */
    'value'?: string;
}
/**
 * QueryDelegatorDelegationsResponse is response type for the Query/DelegatorDelegations RPC method.
 * @export
 * @interface InlineResponse20038
 */
export interface InlineResponse20038 {
    /**
     * delegation_responses defines all the delegations\' info of a delegator.
     * @type {Array<InlineResponse20038DelegationResponses>}
     * @memberof InlineResponse20038
     */
    'delegation_responses'?: Array<InlineResponse20038DelegationResponses>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20038
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * Delegation represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator.
 * @export
 * @interface InlineResponse20038Delegation
 */
export interface InlineResponse20038Delegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     * @type {string}
     * @memberof InlineResponse20038Delegation
     */
    'delegator_address'?: string;
    /**
     * validator_address is the bech32-encoded address of the validator.
     * @type {string}
     * @memberof InlineResponse20038Delegation
     */
    'validator_address'?: string;
    /**
     * shares define the delegation shares received.
     * @type {string}
     * @memberof InlineResponse20038Delegation
     */
    'shares'?: string;
}
/**
 * DelegationResponse is equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface InlineResponse20038DelegationResponses
 */
export interface InlineResponse20038DelegationResponses {
    /**
     * 
     * @type {InlineResponse20038Delegation}
     * @memberof InlineResponse20038DelegationResponses
     */
    'delegation'?: InlineResponse20038Delegation;
    /**
     * 
     * @type {InlineResponse2003Balances}
     * @memberof InlineResponse20038DelegationResponses
     */
    'balance'?: InlineResponse2003Balances;
}
/**
 * QueryRedelegationsResponse is response type for the Query/Redelegations RPC method.
 * @export
 * @interface InlineResponse20039
 */
export interface InlineResponse20039 {
    /**
     * 
     * @type {Array<InlineResponse20039RedelegationResponses>}
     * @memberof InlineResponse20039
     */
    'redelegation_responses'?: Array<InlineResponse20039RedelegationResponses>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20039
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * RedelegationEntryResponse is equivalent to a RedelegationEntry except that it contains a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface InlineResponse20039Entries
 */
export interface InlineResponse20039Entries {
    /**
     * 
     * @type {InlineResponse20039RedelegationEntries}
     * @memberof InlineResponse20039Entries
     */
    'redelegation_entry'?: InlineResponse20039RedelegationEntries;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20039Entries
     */
    'balance'?: string;
}
/**
 * Redelegation contains the list of a particular delegator\'s redelegating bonds from a particular source validator to a particular destination validator.
 * @export
 * @interface InlineResponse20039Redelegation
 */
export interface InlineResponse20039Redelegation {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     * @type {string}
     * @memberof InlineResponse20039Redelegation
     */
    'delegator_address'?: string;
    /**
     * validator_src_address is the validator redelegation source operator address.
     * @type {string}
     * @memberof InlineResponse20039Redelegation
     */
    'validator_src_address'?: string;
    /**
     * validator_dst_address is the validator redelegation destination operator address.
     * @type {string}
     * @memberof InlineResponse20039Redelegation
     */
    'validator_dst_address'?: string;
    /**
     * entries are the redelegation entries.
     * @type {Array<InlineResponse20039RedelegationEntries>}
     * @memberof InlineResponse20039Redelegation
     */
    'entries'?: Array<InlineResponse20039RedelegationEntries>;
}
/**
 * RedelegationEntry defines a redelegation object with relevant metadata.
 * @export
 * @interface InlineResponse20039RedelegationEntries
 */
export interface InlineResponse20039RedelegationEntries {
    /**
     * creation_height  defines the height which the redelegation took place.
     * @type {string}
     * @memberof InlineResponse20039RedelegationEntries
     */
    'creation_height'?: string;
    /**
     * completion_time defines the unix time for redelegation completion.
     * @type {string}
     * @memberof InlineResponse20039RedelegationEntries
     */
    'completion_time'?: string;
    /**
     * initial_balance defines the initial balance when redelegation started.
     * @type {string}
     * @memberof InlineResponse20039RedelegationEntries
     */
    'initial_balance'?: string;
    /**
     * shares_dst is the amount of destination-validator shares created by redelegation.
     * @type {string}
     * @memberof InlineResponse20039RedelegationEntries
     */
    'shares_dst'?: string;
}
/**
 * RedelegationResponse is equivalent to a Redelegation except that its entries contain a balance in addition to shares which is more suitable for client responses.
 * @export
 * @interface InlineResponse20039RedelegationResponses
 */
export interface InlineResponse20039RedelegationResponses {
    /**
     * 
     * @type {InlineResponse20039Redelegation}
     * @memberof InlineResponse20039RedelegationResponses
     */
    'redelegation'?: InlineResponse20039Redelegation;
    /**
     * 
     * @type {Array<InlineResponse20039Entries>}
     * @memberof InlineResponse20039RedelegationResponses
     */
    'entries'?: Array<InlineResponse20039Entries>;
}
/**
 * Coin defines a token with a denomination and an amount.  NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto.
 * @export
 * @interface InlineResponse2003Balances
 */
export interface InlineResponse2003Balances {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Balances
     */
    'denom'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2003Balances
     */
    'amount'?: string;
}
/**
 * QueryBalanceResponse is the response type for the Query/Balance RPC method.
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {InlineResponse2003Balances}
     * @memberof InlineResponse2004
     */
    'balance'?: InlineResponse2003Balances;
}
/**
 * QueryUnbondingDelegatorDelegationsResponse is response type for the Query/UnbondingDelegatorDelegations RPC method.
 * @export
 * @interface InlineResponse20040
 */
export interface InlineResponse20040 {
    /**
     * 
     * @type {Array<InlineResponse20040UnbondingResponses>}
     * @memberof InlineResponse20040
     */
    'unbonding_responses'?: Array<InlineResponse20040UnbondingResponses>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20040
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * UnbondingDelegationEntry defines an unbonding object with relevant metadata.
 * @export
 * @interface InlineResponse20040Entries
 */
export interface InlineResponse20040Entries {
    /**
     * creation_height is the height which the unbonding took place.
     * @type {string}
     * @memberof InlineResponse20040Entries
     */
    'creation_height'?: string;
    /**
     * completion_time is the unix time for unbonding completion.
     * @type {string}
     * @memberof InlineResponse20040Entries
     */
    'completion_time'?: string;
    /**
     * initial_balance defines the tokens initially scheduled to receive at completion.
     * @type {string}
     * @memberof InlineResponse20040Entries
     */
    'initial_balance'?: string;
    /**
     * balance defines the tokens to receive at completion.
     * @type {string}
     * @memberof InlineResponse20040Entries
     */
    'balance'?: string;
}
/**
 * UnbondingDelegation stores all of a single delegator\'s unbonding bonds for a single validator in an time-ordered list.
 * @export
 * @interface InlineResponse20040UnbondingResponses
 */
export interface InlineResponse20040UnbondingResponses {
    /**
     * delegator_address is the bech32-encoded address of the delegator.
     * @type {string}
     * @memberof InlineResponse20040UnbondingResponses
     */
    'delegator_address'?: string;
    /**
     * validator_address is the bech32-encoded address of the validator.
     * @type {string}
     * @memberof InlineResponse20040UnbondingResponses
     */
    'validator_address'?: string;
    /**
     * entries are the unbonding delegation entries.
     * @type {Array<InlineResponse20040Entries>}
     * @memberof InlineResponse20040UnbondingResponses
     */
    'entries'?: Array<InlineResponse20040Entries>;
}
/**
 * QueryDelegatorValidatorsResponse is response type for the Query/DelegatorValidators RPC method.
 * @export
 * @interface InlineResponse20041
 */
export interface InlineResponse20041 {
    /**
     * validators defines the validators\' info of a delegator.
     * @type {Array<InlineResponse20041Validators>}
     * @memberof InlineResponse20041
     */
    'validators'?: Array<InlineResponse20041Validators>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20041
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * commission defines the commission parameters.
 * @export
 * @interface InlineResponse20041Commission
 */
export interface InlineResponse20041Commission {
    /**
     * 
     * @type {InlineResponse20041CommissionCommissionRates}
     * @memberof InlineResponse20041Commission
     */
    'commission_rates'?: InlineResponse20041CommissionCommissionRates;
    /**
     * update_time is the last time the commission rate was changed.
     * @type {string}
     * @memberof InlineResponse20041Commission
     */
    'update_time'?: string;
}
/**
 * commission_rates defines the initial commission rates to be used for creating a validator.
 * @export
 * @interface InlineResponse20041CommissionCommissionRates
 */
export interface InlineResponse20041CommissionCommissionRates {
    /**
     * rate is the commission rate charged to delegators, as a fraction.
     * @type {string}
     * @memberof InlineResponse20041CommissionCommissionRates
     */
    'rate'?: string;
    /**
     * max_rate defines the maximum commission rate which validator can ever charge, as a fraction.
     * @type {string}
     * @memberof InlineResponse20041CommissionCommissionRates
     */
    'max_rate'?: string;
    /**
     * max_change_rate defines the maximum daily increase of the validator commission, as a fraction.
     * @type {string}
     * @memberof InlineResponse20041CommissionCommissionRates
     */
    'max_change_rate'?: string;
}
/**
 * description defines the description terms for the validator.
 * @export
 * @interface InlineResponse20041Description
 */
export interface InlineResponse20041Description {
    /**
     * moniker defines a human-readable name for the validator.
     * @type {string}
     * @memberof InlineResponse20041Description
     */
    'moniker'?: string;
    /**
     * identity defines an optional identity signature (ex. UPort or Keybase).
     * @type {string}
     * @memberof InlineResponse20041Description
     */
    'identity'?: string;
    /**
     * website defines an optional website link.
     * @type {string}
     * @memberof InlineResponse20041Description
     */
    'website'?: string;
    /**
     * security_contact defines an optional email for security contact.
     * @type {string}
     * @memberof InlineResponse20041Description
     */
    'security_contact'?: string;
    /**
     * details define other optional details.
     * @type {string}
     * @memberof InlineResponse20041Description
     */
    'details'?: string;
}
/**
 * Validator defines a validator, together with the total amount of the Validator\'s bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate.
 * @export
 * @interface InlineResponse20041Validators
 */
export interface InlineResponse20041Validators {
    /**
     * operator_address defines the address of the validator\'s operator; bech encoded in JSON.
     * @type {string}
     * @memberof InlineResponse20041Validators
     */
    'operator_address'?: string;
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof InlineResponse20041Validators
     */
    'consensus_pubkey'?: InlineResponse200Accounts;
    /**
     * jailed defined whether the validator has been jailed from bonded status or not.
     * @type {boolean}
     * @memberof InlineResponse20041Validators
     */
    'jailed'?: boolean;
    /**
     * status is the validator status (bonded/unbonding/unbonded).
     * @type {string}
     * @memberof InlineResponse20041Validators
     */
    'status'?: InlineResponse20041ValidatorsStatusEnum;
    /**
     * tokens define the delegated tokens (incl. self-delegation).
     * @type {string}
     * @memberof InlineResponse20041Validators
     */
    'tokens'?: string;
    /**
     * delegator_shares defines total shares issued to a validator\'s delegators.
     * @type {string}
     * @memberof InlineResponse20041Validators
     */
    'delegator_shares'?: string;
    /**
     * 
     * @type {InlineResponse20041Description}
     * @memberof InlineResponse20041Validators
     */
    'description'?: InlineResponse20041Description;
    /**
     * unbonding_height defines, if unbonding, the height at which this validator has begun unbonding.
     * @type {string}
     * @memberof InlineResponse20041Validators
     */
    'unbonding_height'?: string;
    /**
     * unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.
     * @type {string}
     * @memberof InlineResponse20041Validators
     */
    'unbonding_time'?: string;
    /**
     * 
     * @type {InlineResponse20041Commission}
     * @memberof InlineResponse20041Validators
     */
    'commission'?: InlineResponse20041Commission;
    /**
     * min_self_delegation is the validator\'s self declared minimum self delegation.
     * @type {string}
     * @memberof InlineResponse20041Validators
     */
    'min_self_delegation'?: string;
}

export const InlineResponse20041ValidatorsStatusEnum = {
    Unspecified: 'BOND_STATUS_UNSPECIFIED',
    Unbonded: 'BOND_STATUS_UNBONDED',
    Unbonding: 'BOND_STATUS_UNBONDING',
    Bonded: 'BOND_STATUS_BONDED'
} as const;

export type InlineResponse20041ValidatorsStatusEnum = typeof InlineResponse20041ValidatorsStatusEnum[keyof typeof InlineResponse20041ValidatorsStatusEnum];

/**
 * QueryDelegatorValidatorResponse response type for the Query/DelegatorValidator RPC method.
 * @export
 * @interface InlineResponse20042
 */
export interface InlineResponse20042 {
    /**
     * 
     * @type {InlineResponse20041Validators}
     * @memberof InlineResponse20042
     */
    'validator'?: InlineResponse20041Validators;
}
/**
 * QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC method.
 * @export
 * @interface InlineResponse20043
 */
export interface InlineResponse20043 {
    /**
     * 
     * @type {InlineResponse20043Hist}
     * @memberof InlineResponse20043
     */
    'hist'?: InlineResponse20043Hist;
}
/**
 * hist defines the historical info at the given height.
 * @export
 * @interface InlineResponse20043Hist
 */
export interface InlineResponse20043Hist {
    /**
     * 
     * @type {InlineResponse20043HistHeader}
     * @memberof InlineResponse20043Hist
     */
    'header'?: InlineResponse20043HistHeader;
    /**
     * 
     * @type {Array<InlineResponse20041Validators>}
     * @memberof InlineResponse20043Hist
     */
    'valset'?: Array<InlineResponse20041Validators>;
}
/**
 * Header defines the structure of a Tendermint block header.
 * @export
 * @interface InlineResponse20043HistHeader
 */
export interface InlineResponse20043HistHeader {
    /**
     * 
     * @type {BasicBlockInfo}
     * @memberof InlineResponse20043HistHeader
     */
    'version'?: BasicBlockInfo;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'chain_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'height'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'time'?: string;
    /**
     * 
     * @type {PrevBlockInfo}
     * @memberof InlineResponse20043HistHeader
     */
    'last_block_id'?: PrevBlockInfo;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'last_commit_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'data_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'validators_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'next_validators_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'consensus_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'app_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'last_results_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'evidence_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20043HistHeader
     */
    'proposer_address'?: string;
}
/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 * @export
 * @interface InlineResponse20044
 */
export interface InlineResponse20044 {
    /**
     * 
     * @type {InlineResponse20044Params}
     * @memberof InlineResponse20044
     */
    'params'?: InlineResponse20044Params;
}
/**
 * params holds all the parameters of this module.
 * @export
 * @interface InlineResponse20044Params
 */
export interface InlineResponse20044Params {
    /**
     * unbonding_time is the time duration of unbonding.
     * @type {string}
     * @memberof InlineResponse20044Params
     */
    'unbonding_time'?: string;
    /**
     * max_validators is the maximum number of validators.
     * @type {number}
     * @memberof InlineResponse20044Params
     */
    'max_validators'?: number;
    /**
     * max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio).
     * @type {number}
     * @memberof InlineResponse20044Params
     */
    'max_entries'?: number;
    /**
     * historical_entries is the number of historical entries to persist.
     * @type {number}
     * @memberof InlineResponse20044Params
     */
    'historical_entries'?: number;
    /**
     * bond_denom defines the bondable coin denomination.
     * @type {string}
     * @memberof InlineResponse20044Params
     */
    'bond_denom'?: string;
}
/**
 * QueryPoolResponse is response type for the Query/Pool RPC method.
 * @export
 * @interface InlineResponse20045
 */
export interface InlineResponse20045 {
    /**
     * 
     * @type {InlineResponse20045Pool}
     * @memberof InlineResponse20045
     */
    'pool'?: InlineResponse20045Pool;
}
/**
 * pool defines the pool info.
 * @export
 * @interface InlineResponse20045Pool
 */
export interface InlineResponse20045Pool {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20045Pool
     */
    'not_bonded_tokens'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20045Pool
     */
    'bonded_tokens'?: string;
}
/**
 * QueryDelegationResponse is response type for the Query/Delegation RPC method.
 * @export
 * @interface InlineResponse20046
 */
export interface InlineResponse20046 {
    /**
     * 
     * @type {InlineResponse20038DelegationResponses}
     * @memberof InlineResponse20046
     */
    'delegation_response'?: InlineResponse20038DelegationResponses;
}
/**
 * QueryDelegationResponse is response type for the Query/UnbondingDelegation RPC method.
 * @export
 * @interface InlineResponse20047
 */
export interface InlineResponse20047 {
    /**
     * 
     * @type {InlineResponse20040UnbondingResponses}
     * @memberof InlineResponse20047
     */
    'unbond'?: InlineResponse20040UnbondingResponses;
}
/**
 * QueryValidatorUnbondingDelegationsResponse is response type for the Query/ValidatorUnbondingDelegations RPC method.
 * @export
 * @interface InlineResponse20048
 */
export interface InlineResponse20048 {
    /**
     * 
     * @type {Array<InlineResponse20040UnbondingResponses>}
     * @memberof InlineResponse20048
     */
    'unbonding_responses'?: Array<InlineResponse20040UnbondingResponses>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse20048
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * SimulateResponse is the response type for the Service.SimulateRPC method.
 * @export
 * @interface InlineResponse20049
 */
export interface InlineResponse20049 {
    /**
     * 
     * @type {InlineResponse20049GasInfo}
     * @memberof InlineResponse20049
     */
    'gas_info'?: InlineResponse20049GasInfo;
    /**
     * 
     * @type {InlineResponse20049Result}
     * @memberof InlineResponse20049
     */
    'result'?: InlineResponse20049Result;
}
/**
 * gas_info is the information about gas used in the simulation.
 * @export
 * @interface InlineResponse20049GasInfo
 */
export interface InlineResponse20049GasInfo {
    /**
     * GasWanted is the maximum units of work we allow this tx to perform.
     * @type {string}
     * @memberof InlineResponse20049GasInfo
     */
    'gas_wanted'?: string;
    /**
     * GasUsed is the amount of gas actually consumed.
     * @type {string}
     * @memberof InlineResponse20049GasInfo
     */
    'gas_used'?: string;
}
/**
 * result is the result of the simulation.
 * @export
 * @interface InlineResponse20049Result
 */
export interface InlineResponse20049Result {
    /**
     * Data is any data returned from message or handler execution. It MUST be length prefixed in order to separate data from multiple message executions.
     * @type {string}
     * @memberof InlineResponse20049Result
     */
    'data'?: string;
    /**
     * Log contains the log information from message or handler execution.
     * @type {string}
     * @memberof InlineResponse20049Result
     */
    'log'?: string;
    /**
     * Events contains a slice of Event objects that were emitted during message or handler execution.
     * @type {Array<InlineResponse20049ResultEvents>}
     * @memberof InlineResponse20049Result
     */
    'events'?: Array<InlineResponse20049ResultEvents>;
}
/**
 * EventAttribute is a single key-value pair, associated with an event.
 * @export
 * @interface InlineResponse20049ResultAttributes
 */
export interface InlineResponse20049ResultAttributes {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20049ResultAttributes
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20049ResultAttributes
     */
    'value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse20049ResultAttributes
     */
    'index'?: boolean;
}
/**
 * Event allows application developers to attach additional information to ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx. Later, transactions may be queried using these events.
 * @export
 * @interface InlineResponse20049ResultEvents
 */
export interface InlineResponse20049ResultEvents {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20049ResultEvents
     */
    'type'?: string;
    /**
     * 
     * @type {Array<InlineResponse20049ResultAttributes>}
     * @memberof InlineResponse20049ResultEvents
     */
    'attributes'?: Array<InlineResponse20049ResultAttributes>;
}
/**
 * QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query.
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Array<InlineResponse2005DenomOwners>}
     * @memberof InlineResponse2005
     */
    'denom_owners'?: Array<InlineResponse2005DenomOwners>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse2005
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * BroadcastTxResponse is the response type for the Service.BroadcastTx method.
 * @export
 * @interface InlineResponse20050
 */
export interface InlineResponse20050 {
    /**
     * 
     * @type {InlineResponse20050TxResponse}
     * @memberof InlineResponse20050
     */
    'tx_response'?: InlineResponse20050TxResponse;
}
/**
 * TxResponse defines a structure containing relevant tx data and metadata. The tags are stringified and the log is JSON decoded.
 * @export
 * @interface InlineResponse20050TxResponse
 */
export interface InlineResponse20050TxResponse {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20050TxResponse
     */
    'height'?: string;
    /**
     * The transaction hash.
     * @type {string}
     * @memberof InlineResponse20050TxResponse
     */
    'txhash'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20050TxResponse
     */
    'codespace'?: string;
    /**
     * Response code.
     * @type {number}
     * @memberof InlineResponse20050TxResponse
     */
    'code'?: number;
    /**
     * Result bytes, if any.
     * @type {string}
     * @memberof InlineResponse20050TxResponse
     */
    'data'?: string;
    /**
     * The output of the application\'s logger (raw string). May be non-deterministic.
     * @type {string}
     * @memberof InlineResponse20050TxResponse
     */
    'raw_log'?: string;
    /**
     * The output of the application\'s logger (typed). May be non-deterministic.
     * @type {Array<InlineResponse20050TxResponseLogs>}
     * @memberof InlineResponse20050TxResponse
     */
    'logs'?: Array<InlineResponse20050TxResponseLogs>;
    /**
     * Additional information. May be non-deterministic.
     * @type {string}
     * @memberof InlineResponse20050TxResponse
     */
    'info'?: string;
    /**
     * Amount of gas requested for transaction.
     * @type {string}
     * @memberof InlineResponse20050TxResponse
     */
    'gas_wanted'?: string;
    /**
     * Amount of gas consumed by transaction.
     * @type {string}
     * @memberof InlineResponse20050TxResponse
     */
    'gas_used'?: string;
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof InlineResponse20050TxResponse
     */
    'tx'?: InlineResponse200Accounts;
    /**
     * Time of the previous block. For heights > 1, it\'s the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it\'s genesis time.
     * @type {string}
     * @memberof InlineResponse20050TxResponse
     */
    'timestamp'?: string;
}
/**
 * Attribute defines an attribute wrapper where the key and value are strings instead of raw bytes.
 * @export
 * @interface InlineResponse20050TxResponseAttributes
 */
export interface InlineResponse20050TxResponseAttributes {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20050TxResponseAttributes
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20050TxResponseAttributes
     */
    'value'?: string;
}
/**
 * StringEvent defines en Event object wrapper where all the attributes contain key/value pairs that are strings instead of raw bytes.
 * @export
 * @interface InlineResponse20050TxResponseEvents
 */
export interface InlineResponse20050TxResponseEvents {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20050TxResponseEvents
     */
    'type'?: string;
    /**
     * 
     * @type {Array<InlineResponse20050TxResponseAttributes>}
     * @memberof InlineResponse20050TxResponseEvents
     */
    'attributes'?: Array<InlineResponse20050TxResponseAttributes>;
}
/**
 * ABCIMessageLog defines a structure containing an indexed tx ABCI message log.
 * @export
 * @interface InlineResponse20050TxResponseLogs
 */
export interface InlineResponse20050TxResponseLogs {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse20050TxResponseLogs
     */
    'msg_index'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20050TxResponseLogs
     */
    'log'?: string;
    /**
     * Events contains a slice of Event objects that were emitted during some execution.
     * @type {Array<InlineResponse20050TxResponseEvents>}
     * @memberof InlineResponse20050TxResponseLogs
     */
    'events'?: Array<InlineResponse20050TxResponseEvents>;
}
/**
 * QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC method.
 * @export
 * @interface InlineResponse20051
 */
export interface InlineResponse20051 {
    /**
     * height is the block height at which the plan was applied.
     * @type {string}
     * @memberof InlineResponse20051
     */
    'height'?: string;
}
/**
 * QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC method.
 * @export
 * @interface InlineResponse20052
 */
export interface InlineResponse20052 {
    /**
     * 
     * @type {InlineResponse20052Plan}
     * @memberof InlineResponse20052
     */
    'plan'?: InlineResponse20052Plan;
}
/**
 * plan is the current upgrade plan.
 * @export
 * @interface InlineResponse20052Plan
 */
export interface InlineResponse20052Plan {
    /**
     * Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special \"on-upgrade\" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit.
     * @type {string}
     * @memberof InlineResponse20052Plan
     */
    'name'?: string;
    /**
     * Deprecated: Time based upgrades have been deprecated. Time based upgrade logic has been removed from the SDK. If this field is not empty, an error will be thrown.
     * @type {string}
     * @memberof InlineResponse20052Plan
     */
    'time'?: string;
    /**
     * The height at which the upgrade must be performed. Only used if Time is not set.
     * @type {string}
     * @memberof InlineResponse20052Plan
     */
    'height'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20052Plan
     */
    'info'?: string;
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof InlineResponse20052Plan
     */
    'upgraded_client_state'?: InlineResponse200Accounts;
}
/**
 * QueryModuleVersionsResponse is the response type for the Query/ModuleVersions RPC method.
 * @export
 * @interface InlineResponse20053
 */
export interface InlineResponse20053 {
    /**
     * module_versions is a list of module names with their consensus versions.
     * @type {Array<InlineResponse20053ModuleVersions>}
     * @memberof InlineResponse20053
     */
    'module_versions'?: Array<InlineResponse20053ModuleVersions>;
}
/**
 * ModuleVersion specifies a module and its consensus version.
 * @export
 * @interface InlineResponse20053ModuleVersions
 */
export interface InlineResponse20053ModuleVersions {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20053ModuleVersions
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20053ModuleVersions
     */
    'version'?: string;
}
/**
 * QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState RPC method.
 * @export
 * @interface InlineResponse20054
 */
export interface InlineResponse20054 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20054
     */
    'upgraded_consensus_state'?: string;
}
/**
 * QueryGrantsResponse is the response type for the Query/Authorizations RPC method.
 * @export
 * @interface InlineResponse20055
 */
export interface InlineResponse20055 {
    /**
     * authorizations is a list of grants granted for grantee by granter.
     * @type {Array<InlineResponse20055Grants>}
     * @memberof InlineResponse20055
     */
    'grants'?: Array<InlineResponse20055Grants>;
    /**
     * 
     * @type {InlineResponse20014Pagination}
     * @memberof InlineResponse20055
     */
    'pagination'?: InlineResponse20014Pagination;
}
/**
 * Grant gives permissions to execute the provide method with expiration time.
 * @export
 * @interface InlineResponse20055Grants
 */
export interface InlineResponse20055Grants {
    /**
     * 
     * @type {InlineResponse200Accounts}
     * @memberof InlineResponse20055Grants
     */
    'authorization'?: InlineResponse200Accounts;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse20055Grants
     */
    'expiration'?: string;
}
/**
 * QueryAllowanceResponse is the response type for the Query/Allowance RPC method.
 * @export
 * @interface InlineResponse20056
 */
export interface InlineResponse20056 {
    /**
     * 
     * @type {GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext}
     * @memberof InlineResponse20056
     */
    'allowance'?: GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext;
}
/**
 * QueryAllowancesResponse is the response type for the Query/Allowances RPC method.
 * @export
 * @interface InlineResponse20057
 */
export interface InlineResponse20057 {
    /**
     * allowances are allowance\'s granted for grantee by granter.
     * @type {Array<GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext1>}
     * @memberof InlineResponse20057
     */
    'allowances'?: Array<GrantIsStoredInTheKVStoreToRecordAGrantWithFullContext1>;
    /**
     * 
     * @type {InlineResponse20014Pagination}
     * @memberof InlineResponse20057
     */
    'pagination'?: InlineResponse20014Pagination;
}
/**
 * DenomOwner defines structure representing an account that owns or holds a particular denominated token. It contains the account address and account balance of the denominated token.
 * @export
 * @interface InlineResponse2005DenomOwners
 */
export interface InlineResponse2005DenomOwners {
    /**
     * address defines the address that owns a particular denomination.
     * @type {string}
     * @memberof InlineResponse2005DenomOwners
     */
    'address'?: string;
    /**
     * 
     * @type {InlineResponse2003Balances}
     * @memberof InlineResponse2005DenomOwners
     */
    'balance'?: InlineResponse2003Balances;
}
/**
 * QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC method.
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * metadata provides the client information for all the registered tokens.
     * @type {Array<InlineResponse2006Metadatas>}
     * @memberof InlineResponse2006
     */
    'metadatas'?: Array<InlineResponse2006Metadatas>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof InlineResponse2006
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * DenomUnit represents a struct that describes a given denomination unit of the basic token.
 * @export
 * @interface InlineResponse2006DenomUnits
 */
export interface InlineResponse2006DenomUnits {
    /**
     * denom represents the string name of the given denom unit (e.g uatom).
     * @type {string}
     * @memberof InlineResponse2006DenomUnits
     */
    'denom'?: string;
    /**
     * exponent represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit\'s denom 1 denom = 1^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of \'atom\' with exponent = 6, thus: 1 atom = 10^6 uatom).
     * @type {number}
     * @memberof InlineResponse2006DenomUnits
     */
    'exponent'?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof InlineResponse2006DenomUnits
     */
    'aliases'?: Array<string>;
}
/**
 * Metadata represents a struct that describes a basic token.
 * @export
 * @interface InlineResponse2006Metadatas
 */
export interface InlineResponse2006Metadatas {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Metadatas
     */
    'description'?: string;
    /**
     * 
     * @type {Array<InlineResponse2006DenomUnits>}
     * @memberof InlineResponse2006Metadatas
     */
    'denom_units'?: Array<InlineResponse2006DenomUnits>;
    /**
     * base represents the base denom (should be the DenomUnit with exponent = 0).
     * @type {string}
     * @memberof InlineResponse2006Metadatas
     */
    'base'?: string;
    /**
     * display indicates the suggested denom that should be displayed in clients.
     * @type {string}
     * @memberof InlineResponse2006Metadatas
     */
    'display'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2006Metadatas
     */
    'name'?: string;
    /**
     * symbol is the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display.
     * @type {string}
     * @memberof InlineResponse2006Metadatas
     */
    'symbol'?: string;
    /**
     * URI to a document (on or off-chain) that contains additional information. Optional.
     * @type {string}
     * @memberof InlineResponse2006Metadatas
     */
    'uri'?: string;
    /**
     * URIHash is a sha256 hash of a document pointed by URI. It\'s used to verify that the document didn\'t change. Optional.
     * @type {string}
     * @memberof InlineResponse2006Metadatas
     */
    'uri_hash'?: string;
}
/**
 * QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC method.
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {InlineResponse2006Metadatas}
     * @memberof InlineResponse2007
     */
    'metadata'?: InlineResponse2006Metadatas;
}
/**
 * QueryParamsResponse defines the response type for querying x/bank parameters.
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {InlineResponse2008Params}
     * @memberof InlineResponse2008
     */
    'params'?: InlineResponse2008Params;
}
/**
 * Params defines the parameters for the bank module.
 * @export
 * @interface InlineResponse2008Params
 */
export interface InlineResponse2008Params {
    /**
     * 
     * @type {Array<InlineResponse2008ParamsSendEnabled>}
     * @memberof InlineResponse2008Params
     */
    'send_enabled'?: Array<InlineResponse2008ParamsSendEnabled>;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008Params
     */
    'default_send_enabled'?: boolean;
}
/**
 * SendEnabled maps coin denom to a send_enabled status (whether a denom is sendable).
 * @export
 * @interface InlineResponse2008ParamsSendEnabled
 */
export interface InlineResponse2008ParamsSendEnabled {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse2008ParamsSendEnabled
     */
    'denom'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InlineResponse2008ParamsSendEnabled
     */
    'enabled'?: boolean;
}
/**
 * QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method.
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {InlineResponse2003Balances}
     * @memberof InlineResponse2009
     */
    'amount'?: InlineResponse2003Balances;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface InlineResponse200Accounts
 */
export interface InlineResponse200Accounts {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof InlineResponse200Accounts
     */
    'type_url'?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof InlineResponse200Accounts
     */
    'value'?: string;
}
/**
 * pagination defines the pagination in the response.
 * @export
 * @interface InlineResponse200Pagination
 */
export interface InlineResponse200Pagination {
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Pagination
     */
    'next_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200Pagination
     */
    'total'?: string;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault
 */
export interface InlineResponseDefault {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault
     */
    'error'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault
     */
    'message'?: string;
    /**
     * 
     * @type {Array<InlineResponse200Accounts>}
     * @memberof InlineResponseDefault
     */
    'details'?: Array<InlineResponse200Accounts>;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1
 */
export interface InlineResponseDefault1 {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1
     */
    'error'?: string;
    /**
     * 
     * @type {number}
     * @memberof InlineResponseDefault1
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1
     */
    'message'?: string;
    /**
     * 
     * @type {Array<InlineResponseDefault1Details>}
     * @memberof InlineResponseDefault1
     */
    'details'?: Array<InlineResponseDefault1Details>;
}
/**
 * 
 * @export
 * @interface InlineResponseDefault1Details
 */
export interface InlineResponseDefault1Details {
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Details
     */
    'type_url'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponseDefault1Details
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ModuleIsTheTypeForVersionInfo
 */
export interface ModuleIsTheTypeForVersionInfo {
    /**
     * 
     * @type {string}
     * @memberof ModuleIsTheTypeForVersionInfo
     */
    'path'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModuleIsTheTypeForVersionInfo
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModuleIsTheTypeForVersionInfo
     */
    'sum'?: string;
}
/**
 * 
 * @export
 * @interface PartsetHeader
 */
export interface PartsetHeader {
    /**
     * 
     * @type {number}
     * @memberof PartsetHeader
     */
    'total'?: number;
    /**
     * 
     * @type {string}
     * @memberof PartsetHeader
     */
    'hash'?: string;
}
/**
 * 
 * @export
 * @interface PrevBlockInfo
 */
export interface PrevBlockInfo {
    /**
     * 
     * @type {string}
     * @memberof PrevBlockInfo
     */
    'hash'?: string;
    /**
     * 
     * @type {PartsetHeader}
     * @memberof PrevBlockInfo
     */
    'part_set_header'?: PartsetHeader;
}
/**
 * 
 * @export
 * @interface PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators
 */
export interface PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators {
    /**
     * 
     * @type {string}
     * @memberof PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators
     */
    'ed25519'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators
     */
    'secp256k1'?: string;
}
/**
 * 
 * @export
 * @interface QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod
 */
export interface QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod {
    /**
     * 
     * @type {QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams}
     * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod
     */
    'params'?: QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams;
}
/**
 * Params represents the parameters used for by the slashing module.
 * @export
 * @interface QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
 */
export interface QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams {
    /**
     * 
     * @type {string}
     * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
     */
    'signed_blocks_window'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
     */
    'min_signed_per_window'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
     */
    'downtime_jail_duration'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
     */
    'slash_fraction_double_sign'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethodParams
     */
    'slash_fraction_downtime'?: string;
}
/**
 * 
 * @export
 * @interface QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod
 */
export interface QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod {
    /**
     * 
     * @type {ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress}
     * @memberof QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod
     */
    'val_signing_info'?: ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress;
}
/**
 * 
 * @export
 * @interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod
 */
export interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod {
    /**
     * 
     * @type {Array<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo>}
     * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod
     */
    'info'?: Array<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo>;
    /**
     * 
     * @type {QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination}
     * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod
     */
    'pagination'?: QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination;
}
/**
 * ValidatorSigningInfo defines a validator\'s signing info for monitoring their liveness activity.
 * @export
 * @interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
 */
export interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo {
    /**
     * 
     * @type {string}
     * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
     */
    'start_height'?: string;
    /**
     * Index which is incremented each time the validator was a bonded in a block and may have signed a precommit or not. This in conjunction with the `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
     * @type {string}
     * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
     */
    'index_offset'?: string;
    /**
     * Timestamp until which the validator is jailed due to liveness downtime.
     * @type {string}
     * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
     */
    'jailed_until'?: string;
    /**
     * Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehiavor.
     * @type {boolean}
     * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
     */
    'tombstoned'?: boolean;
    /**
     * A counter kept to avoid unnecessary array reads. Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
     * @type {string}
     * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodInfo
     */
    'missed_blocks_counter'?: string;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.   message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }
 * @export
 * @interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination
 */
export interface QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination {
    /**
     * 
     * @type {string}
     * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination
     */
    'next_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethodPagination
     */
    'total'?: string;
}
/**
 * 
 * @export
 * @interface QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod
 */
export interface QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod {
    /**
     * 
     * @type {Array<InlineResponse2003Balances>}
     * @memberof QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod
     */
    'supply'?: Array<InlineResponse2003Balances>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod
 */
export interface QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod {
    /**
     * 
     * @type {QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission}
     * @memberof QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod
     */
    'commission'?: QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission;
}
/**
 * commission defines the commision the validator received.
 * @export
 * @interface QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission
 */
export interface QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission {
    /**
     * 
     * @type {Array<InlineResponse20016Pool>}
     * @memberof QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethodCommission
     */
    'commission'?: Array<InlineResponse20016Pool>;
}
/**
 * 
 * @export
 * @interface QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod
 */
export interface QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod {
    /**
     * 
     * @type {Array<InlineResponse20038DelegationResponses>}
     * @memberof QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod
     */
    'delegation_responses'?: Array<InlineResponse20038DelegationResponses>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod
 */
export interface QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod {
    /**
     * 
     * @type {InlineResponse20041Validators}
     * @memberof QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod
     */
    'validator'?: InlineResponse20041Validators;
}
/**
 * 
 * @export
 * @interface QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod
 */
export interface QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod {
    /**
     * validators contains all the queried validators.
     * @type {Array<InlineResponse20041Validators>}
     * @memberof QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod
     */
    'validators'?: Array<InlineResponse20041Validators>;
    /**
     * 
     * @type {InlineResponse200Pagination}
     * @memberof QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod
     */
    'pagination'?: InlineResponse200Pagination;
}
/**
 * 
 * @export
 * @interface SingleRepresentsASingleSigner
 */
export interface SingleRepresentsASingleSigner {
    /**
     * SignMode represents a signing mode with its own security guarantees.   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be rejected  - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is verified with raw bytes from Tx  - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some human-readable textual representation on top of the binary representation from SIGN_MODE_DIRECT  - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses Amino JSON and will be removed in the future
     * @type {string}
     * @memberof SingleRepresentsASingleSigner
     */
    'mode'?: SingleRepresentsASingleSignerModeEnum;
}

export const SingleRepresentsASingleSignerModeEnum = {
    Unspecified: 'SIGN_MODE_UNSPECIFIED',
    Direct: 'SIGN_MODE_DIRECT',
    Textual: 'SIGN_MODE_TEXTUAL',
    LegacyAminoJson: 'SIGN_MODE_LEGACY_AMINO_JSON'
} as const;

export type SingleRepresentsASingleSignerModeEnum = typeof SingleRepresentsASingleSignerModeEnum[keyof typeof SingleRepresentsASingleSignerModeEnum];

/**
 * Event allows application developers to attach additional information to ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx. Later, transactions may be queried using these events.
 * @export
 * @interface TendermintAbciEvent
 */
export interface TendermintAbciEvent {
    /**
     * 
     * @type {string}
     * @memberof TendermintAbciEvent
     */
    'type'?: string;
    /**
     * 
     * @type {Array<InlineResponse20049ResultAttributes>}
     * @memberof TendermintAbciEvent
     */
    'attributes'?: Array<InlineResponse20049ResultAttributes>;
}
/**
 * EventAttribute is a single key-value pair, associated with an event.
 * @export
 * @interface TendermintAbciEventAttribute
 */
export interface TendermintAbciEventAttribute {
    /**
     * 
     * @type {string}
     * @memberof TendermintAbciEventAttribute
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintAbciEventAttribute
     */
    'value'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TendermintAbciEventAttribute
     */
    'index'?: boolean;
}
/**
 * 
 * @export
 * @interface TendermintCryptoPublicKey
 */
export interface TendermintCryptoPublicKey {
    /**
     * 
     * @type {string}
     * @memberof TendermintCryptoPublicKey
     */
    'ed25519'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintCryptoPublicKey
     */
    'secp256k1'?: string;
}
/**
 * 
 * @export
 * @interface TendermintP2pDefaultNodeInfo
 */
export interface TendermintP2pDefaultNodeInfo {
    /**
     * 
     * @type {InlineResponse20012DefaultNodeInfoProtocolVersion}
     * @memberof TendermintP2pDefaultNodeInfo
     */
    'protocol_version'?: InlineResponse20012DefaultNodeInfoProtocolVersion;
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pDefaultNodeInfo
     */
    'default_node_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pDefaultNodeInfo
     */
    'listen_addr'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pDefaultNodeInfo
     */
    'network'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pDefaultNodeInfo
     */
    'version'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pDefaultNodeInfo
     */
    'channels'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pDefaultNodeInfo
     */
    'moniker'?: string;
    /**
     * 
     * @type {InlineResponse20012DefaultNodeInfoOther}
     * @memberof TendermintP2pDefaultNodeInfo
     */
    'other'?: InlineResponse20012DefaultNodeInfoOther;
}
/**
 * 
 * @export
 * @interface TendermintP2pDefaultNodeInfoOther
 */
export interface TendermintP2pDefaultNodeInfoOther {
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pDefaultNodeInfoOther
     */
    'tx_index'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pDefaultNodeInfoOther
     */
    'rpc_address'?: string;
}
/**
 * 
 * @export
 * @interface TendermintP2pProtocolVersion
 */
export interface TendermintP2pProtocolVersion {
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pProtocolVersion
     */
    'p2p'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pProtocolVersion
     */
    'block'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintP2pProtocolVersion
     */
    'app'?: string;
}
/**
 * 
 * @export
 * @interface TendermintTypesBlock
 */
export interface TendermintTypesBlock {
    /**
     * 
     * @type {InlineResponse20010BlockHeader}
     * @memberof TendermintTypesBlock
     */
    'header'?: InlineResponse20010BlockHeader;
    /**
     * 
     * @type {DataContainsTheSetOfTransactionsIncludedInTheBlock}
     * @memberof TendermintTypesBlock
     */
    'data'?: DataContainsTheSetOfTransactionsIncludedInTheBlock;
    /**
     * 
     * @type {InlineResponse20010BlockEvidence}
     * @memberof TendermintTypesBlock
     */
    'evidence'?: InlineResponse20010BlockEvidence;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit}
     * @memberof TendermintTypesBlock
     */
    'last_commit'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit;
}
/**
 * 
 * @export
 * @interface TendermintTypesBlockID
 */
export interface TendermintTypesBlockID {
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesBlockID
     */
    'hash'?: string;
    /**
     * 
     * @type {PartsetHeader}
     * @memberof TendermintTypesBlockID
     */
    'part_set_header'?: PartsetHeader;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TendermintTypesBlockIDFlag = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
} as const;

export type TendermintTypesBlockIDFlag = typeof TendermintTypesBlockIDFlag[keyof typeof TendermintTypesBlockIDFlag];


/**
 * Commit contains the evidence that a block was committed by a set of validators.
 * @export
 * @interface TendermintTypesCommit
 */
export interface TendermintTypesCommit {
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesCommit
     */
    'height'?: string;
    /**
     * 
     * @type {number}
     * @memberof TendermintTypesCommit
     */
    'round'?: number;
    /**
     * 
     * @type {BlockID}
     * @memberof TendermintTypesCommit
     */
    'block_id'?: BlockID;
    /**
     * 
     * @type {Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures>}
     * @memberof TendermintTypesCommit
     */
    'signatures'?: Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommitSignatures>;
}
/**
 * CommitSig is a part of the Vote included in a Commit.
 * @export
 * @interface TendermintTypesCommitSig
 */
export interface TendermintTypesCommitSig {
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesCommitSig
     */
    'block_id_flag'?: TendermintTypesCommitSigBlockIdFlagEnum;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesCommitSig
     */
    'validator_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesCommitSig
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesCommitSig
     */
    'signature'?: string;
}

export const TendermintTypesCommitSigBlockIdFlagEnum = {
    Unknown: 'BLOCK_ID_FLAG_UNKNOWN',
    Absent: 'BLOCK_ID_FLAG_ABSENT',
    Commit: 'BLOCK_ID_FLAG_COMMIT',
    Nil: 'BLOCK_ID_FLAG_NIL'
} as const;

export type TendermintTypesCommitSigBlockIdFlagEnum = typeof TendermintTypesCommitSigBlockIdFlagEnum[keyof typeof TendermintTypesCommitSigBlockIdFlagEnum];

/**
 * 
 * @export
 * @interface TendermintTypesData
 */
export interface TendermintTypesData {
    /**
     * Txs that will be applied by state @ block.Height+1. NOTE: not all txs here are valid.  We\'re just agreeing on the order first. This means that block.AppHash does not include these txs.
     * @type {Array<string>}
     * @memberof TendermintTypesData
     */
    'txs'?: Array<string>;
}
/**
 * DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes.
 * @export
 * @interface TendermintTypesDuplicateVoteEvidence
 */
export interface TendermintTypesDuplicateVoteEvidence {
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA}
     * @memberof TendermintTypesDuplicateVoteEvidence
     */
    'vote_a'?: InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA}
     * @memberof TendermintTypesDuplicateVoteEvidence
     */
    'vote_b'?: InlineResponse20010BlockEvidenceDuplicateVoteEvidenceVoteA;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesDuplicateVoteEvidence
     */
    'total_voting_power'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesDuplicateVoteEvidence
     */
    'validator_power'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesDuplicateVoteEvidence
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface TendermintTypesEvidence
 */
export interface TendermintTypesEvidence {
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceDuplicateVoteEvidence}
     * @memberof TendermintTypesEvidence
     */
    'duplicate_vote_evidence'?: InlineResponse20010BlockEvidenceDuplicateVoteEvidence;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidence}
     * @memberof TendermintTypesEvidence
     */
    'light_client_attack_evidence'?: InlineResponse20010BlockEvidenceLightClientAttackEvidence;
}
/**
 * 
 * @export
 * @interface TendermintTypesEvidenceList
 */
export interface TendermintTypesEvidenceList {
    /**
     * 
     * @type {Array<InlineResponse20010BlockEvidenceEvidence>}
     * @memberof TendermintTypesEvidenceList
     */
    'evidence'?: Array<InlineResponse20010BlockEvidenceEvidence>;
}
/**
 * Header defines the structure of a Tendermint block header.
 * @export
 * @interface TendermintTypesHeader
 */
export interface TendermintTypesHeader {
    /**
     * 
     * @type {BasicBlockInfo}
     * @memberof TendermintTypesHeader
     */
    'version'?: BasicBlockInfo;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'chain_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'height'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'time'?: string;
    /**
     * 
     * @type {BlockID}
     * @memberof TendermintTypesHeader
     */
    'last_block_id'?: BlockID;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'last_commit_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'data_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'validators_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'next_validators_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'consensus_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'app_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'last_results_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'evidence_hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesHeader
     */
    'proposer_address'?: string;
}
/**
 * 
 * @export
 * @interface TendermintTypesLightBlock
 */
export interface TendermintTypesLightBlock {
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader}
     * @memberof TendermintTypesLightBlock
     */
    'signed_header'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeader;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet}
     * @memberof TendermintTypesLightBlock
     */
    'validator_set'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSet;
}
/**
 * LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client.
 * @export
 * @interface TendermintTypesLightClientAttackEvidence
 */
export interface TendermintTypesLightClientAttackEvidence {
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlock}
     * @memberof TendermintTypesLightClientAttackEvidence
     */
    'conflicting_block'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlock;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesLightClientAttackEvidence
     */
    'common_height'?: string;
    /**
     * 
     * @type {Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>}
     * @memberof TendermintTypesLightClientAttackEvidence
     */
    'byzantine_validators'?: Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesLightClientAttackEvidence
     */
    'total_voting_power'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesLightClientAttackEvidence
     */
    'timestamp'?: string;
}
/**
 * 
 * @export
 * @interface TendermintTypesPartSetHeader
 */
export interface TendermintTypesPartSetHeader {
    /**
     * 
     * @type {number}
     * @memberof TendermintTypesPartSetHeader
     */
    'total'?: number;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesPartSetHeader
     */
    'hash'?: string;
}
/**
 * 
 * @export
 * @interface TendermintTypesSignedHeader
 */
export interface TendermintTypesSignedHeader {
    /**
     * 
     * @type {InlineResponse20010BlockHeader}
     * @memberof TendermintTypesSignedHeader
     */
    'header'?: InlineResponse20010BlockHeader;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit}
     * @memberof TendermintTypesSignedHeader
     */
    'commit'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockSignedHeaderCommit;
}
/**
 * SignedMsgType is a type of signed message in the consensus.   - SIGNED_MSG_TYPE_PREVOTE: Votes  - SIGNED_MSG_TYPE_PROPOSAL: Proposals
 * @export
 * @enum {string}
 */

export const TendermintTypesSignedMsgType = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
} as const;

export type TendermintTypesSignedMsgType = typeof TendermintTypesSignedMsgType[keyof typeof TendermintTypesSignedMsgType];


/**
 * 
 * @export
 * @interface TendermintTypesValidator
 */
export interface TendermintTypesValidator {
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesValidator
     */
    'address'?: string;
    /**
     * 
     * @type {PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators}
     * @memberof TendermintTypesValidator
     */
    'pub_key'?: PublicKeyDefinesTheKeysAvailableForUseWithTendermintValidators;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesValidator
     */
    'voting_power'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesValidator
     */
    'proposer_priority'?: string;
}
/**
 * 
 * @export
 * @interface TendermintTypesValidatorSet
 */
export interface TendermintTypesValidatorSet {
    /**
     * 
     * @type {Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>}
     * @memberof TendermintTypesValidatorSet
     */
    'validators'?: Array<InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators>;
    /**
     * 
     * @type {InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators}
     * @memberof TendermintTypesValidatorSet
     */
    'proposer'?: InlineResponse20010BlockEvidenceLightClientAttackEvidenceConflictingBlockValidatorSetValidators;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesValidatorSet
     */
    'total_voting_power'?: string;
}
/**
 * Vote represents a prevote, precommit, or commit vote from validators for consensus.
 * @export
 * @interface TendermintTypesVote
 */
export interface TendermintTypesVote {
    /**
     * SignedMsgType is a type of signed message in the consensus.   - SIGNED_MSG_TYPE_PREVOTE: Votes  - SIGNED_MSG_TYPE_PROPOSAL: Proposals
     * @type {string}
     * @memberof TendermintTypesVote
     */
    'type'?: TendermintTypesVoteTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesVote
     */
    'height'?: string;
    /**
     * 
     * @type {number}
     * @memberof TendermintTypesVote
     */
    'round'?: number;
    /**
     * 
     * @type {BlockID}
     * @memberof TendermintTypesVote
     */
    'block_id'?: BlockID;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesVote
     */
    'timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesVote
     */
    'validator_address'?: string;
    /**
     * 
     * @type {number}
     * @memberof TendermintTypesVote
     */
    'validator_index'?: number;
    /**
     * 
     * @type {string}
     * @memberof TendermintTypesVote
     */
    'signature'?: string;
}

export const TendermintTypesVoteTypeEnum = {
    Unknown: 'SIGNED_MSG_TYPE_UNKNOWN',
    Prevote: 'SIGNED_MSG_TYPE_PREVOTE',
    Precommit: 'SIGNED_MSG_TYPE_PRECOMMIT',
    Proposal: 'SIGNED_MSG_TYPE_PROPOSAL'
} as const;

export type TendermintTypesVoteTypeEnum = typeof TendermintTypesVoteTypeEnum[keyof typeof TendermintTypesVoteTypeEnum];

/**
 * Consensus captures the consensus rules for processing a block in the blockchain, including all blockchain data structures and the rules of the application\'s state transition machine.
 * @export
 * @interface TendermintVersionConsensus
 */
export interface TendermintVersionConsensus {
    /**
     * 
     * @type {string}
     * @memberof TendermintVersionConsensus
     */
    'block'?: string;
    /**
     * 
     * @type {string}
     * @memberof TendermintVersionConsensus
     */
    'app'?: string;
}
/**
 * ValidatorSigningInfo defines a validator\'s signing info for monitoring their liveness activity.
 * @export
 * @interface ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
 */
export interface ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress {
    /**
     * 
     * @type {string}
     * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
     */
    'start_height'?: string;
    /**
     * Index which is incremented each time the validator was a bonded in a block and may have signed a precommit or not. This in conjunction with the `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`.
     * @type {string}
     * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
     */
    'index_offset'?: string;
    /**
     * Timestamp until which the validator is jailed due to liveness downtime.
     * @type {string}
     * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
     */
    'jailed_until'?: string;
    /**
     * Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehiavor.
     * @type {boolean}
     * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
     */
    'tombstoned'?: boolean;
    /**
     * A counter kept to avoid unnecessary array reads. Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`.
     * @type {string}
     * @memberof ValSigningInfoIsTheSigningInfoOfRequestedValConsAddress
     */
    'missed_blocks_counter'?: string;
}

/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        account: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('account', 'address', address)
            const localVarPath = `/cosmos/auth/v1beta1/accounts/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Accounts returns all the existing accounts
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/auth/v1beta1/accounts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allBalances: async (address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('allBalances', 'address', address)
            const localVarPath = `/cosmos/bank/v1beta1/balances/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEvidence: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/evidence/v1beta1/evidence`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowance: async (granter: string, grantee: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'granter' is not null or undefined
            assertParamExists('allowance', 'granter', granter)
            // verify required parameter 'grantee' is not null or undefined
            assertParamExists('allowance', 'grantee', grantee)
            const localVarPath = `/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}`
                .replace(`{${"granter"}}`, encodeURIComponent(String(granter)))
                .replace(`{${"grantee"}}`, encodeURIComponent(String(grantee)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowances: async (grantee: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantee' is not null or undefined
            assertParamExists('allowances', 'grantee', grantee)
            const localVarPath = `/cosmos/feegrant/v1beta1/allowances/{grantee}`
                .replace(`{${"grantee"}}`, encodeURIComponent(String(grantee)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annualProvisions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/mint/v1beta1/annual_provisions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedPlan: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('appliedPlan', 'name', name)
            const localVarPath = `/cosmos/upgrade/v1beta1/applied_plan/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/auth/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balance: async (address: string, denom: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('balance', 'address', address)
            // verify required parameter 'denom' is not null or undefined
            assertParamExists('balance', 'denom', denom)
            const localVarPath = `/cosmos/bank/v1beta1/balances/{address}/{denom}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"denom"}}`, encodeURIComponent(String(denom)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/bank/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communityPool: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/distribution/v1beta1/community_pool`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPlan: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/upgrade/v1beta1/current_plan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegation: async (validatorAddr: string, delegatorAddr: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('delegation', 'validatorAddr', validatorAddr)
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('delegation', 'delegatorAddr', delegatorAddr)
            const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}`
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)))
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationRewards: async (delegatorAddress: string, validatorAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatorAddress' is not null or undefined
            assertParamExists('delegationRewards', 'delegatorAddress', delegatorAddress)
            // verify required parameter 'validatorAddress' is not null or undefined
            assertParamExists('delegationRewards', 'validatorAddress', validatorAddress)
            const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}`
                .replace(`{${"delegator_address"}}`, encodeURIComponent(String(delegatorAddress)))
                .replace(`{${"validator_address"}}`, encodeURIComponent(String(validatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationTotalRewards: async (delegatorAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatorAddress' is not null or undefined
            assertParamExists('delegationTotalRewards', 'delegatorAddress', delegatorAddress)
            const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards`
                .replace(`{${"delegator_address"}}`, encodeURIComponent(String(delegatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorDelegations: async (delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('delegatorDelegations', 'delegatorAddr', delegatorAddr)
            const localVarPath = `/cosmos/staking/v1beta1/delegations/{delegator_addr}`
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorUnbondingDelegations: async (delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('delegatorUnbondingDelegations', 'delegatorAddr', delegatorAddr)
            const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations`
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidator: async (delegatorAddr: string, validatorAddr: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('delegatorValidator', 'delegatorAddr', delegatorAddr)
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('delegatorValidator', 'validatorAddr', validatorAddr)
            const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}`
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)))
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidators: async (delegatorAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatorAddress' is not null or undefined
            assertParamExists('delegatorValidators', 'delegatorAddress', delegatorAddress)
            const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/validators`
                .replace(`{${"delegator_address"}}`, encodeURIComponent(String(delegatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorWithdrawAddress: async (delegatorAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatorAddress' is not null or undefined
            assertParamExists('delegatorWithdrawAddress', 'delegatorAddress', delegatorAddress)
            const localVarPath = `/cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address`
                .replace(`{${"delegator_address"}}`, encodeURIComponent(String(delegatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomMetadata: async (denom: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'denom' is not null or undefined
            assertParamExists('denomMetadata', 'denom', denom)
            const localVarPath = `/cosmos/bank/v1beta1/denoms_metadata/{denom}`
                .replace(`{${"denom"}}`, encodeURIComponent(String(denom)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomOwners: async (denom: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'denom' is not null or undefined
            assertParamExists('denomOwners', 'denom', denom)
            const localVarPath = `/cosmos/bank/v1beta1/denom_owners/{denom}`
                .replace(`{${"denom"}}`, encodeURIComponent(String(denom)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomsMetadata: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/bank/v1beta1/denoms_metadata`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit: async (proposalId: string, depositor: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('deposit', 'proposalId', proposalId)
            // verify required parameter 'depositor' is not null or undefined
            assertParamExists('deposit', 'depositor', depositor)
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)))
                .replace(`{${"depositor"}}`, encodeURIComponent(String(depositor)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposits: async (proposalId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('deposits', 'proposalId', proposalId)
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/deposits`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/distribution/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evidence: async (evidenceHash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'evidenceHash' is not null or undefined
            assertParamExists('evidence', 'evidenceHash', evidenceHash)
            const localVarPath = `/cosmos/evidence/v1beta1/evidence/{evidence_hash}`
                .replace(`{${"evidence_hash"}}`, encodeURIComponent(String(evidenceHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParams: async (paramsType: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paramsType' is not null or undefined
            assertParamExists('govParams', 'paramsType', paramsType)
            const localVarPath = `/cosmos/gov/v1beta1/params/{params_type}`
                .replace(`{${"params_type"}}`, encodeURIComponent(String(paramsType)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter] 
         * @param {string} [grantee] 
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grants: async (granter?: string, grantee?: string, msgTypeUrl?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/authz/v1beta1/grants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (granter !== undefined) {
                localVarQueryParameter['granter'] = granter;
            }

            if (grantee !== undefined) {
                localVarQueryParameter['grantee'] = grantee;
            }

            if (msgTypeUrl !== undefined) {
                localVarQueryParameter['msg_type_url'] = msgTypeUrl;
            }

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicalInfo: async (height: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'height' is not null or undefined
            assertParamExists('historicalInfo', 'height', height)
            const localVarPath = `/cosmos/staking/v1beta1/historical_info/{height}`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inflation: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/mint/v1beta1/inflation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/mint/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleVersions: async (moduleName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/upgrade/v1beta1/module_versions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (moduleName !== undefined) {
                localVarQueryParameter['module_name'] = moduleName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        params: async (subspace?: string, key?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/params/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (subspace !== undefined) {
                localVarQueryParameter['subspace'] = subspace;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pool: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/staking/v1beta1/pool`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposal: async (proposalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('proposal', 'proposalId', proposalId)
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Proposals queries all proposals based on given status.
         * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposals: async (proposalStatus?: 'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED', voter?: string, depositor?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/gov/v1beta1/proposals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (proposalStatus !== undefined) {
                localVarQueryParameter['proposal_status'] = proposalStatus;
            }

            if (voter !== undefined) {
                localVarQueryParameter['voter'] = voter;
            }

            if (depositor !== undefined) {
                localVarQueryParameter['depositor'] = depositor;
            }

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redelegations: async (delegatorAddr: string, srcValidatorAddr?: string, dstValidatorAddr?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('redelegations', 'delegatorAddr', delegatorAddr)
            const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations`
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (srcValidatorAddr !== undefined) {
                localVarQueryParameter['src_validator_addr'] = srcValidatorAddr;
            }

            if (dstValidatorAddr !== undefined) {
                localVarQueryParameter['dst_validator_addr'] = dstValidatorAddr;
            }

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfo: async (consAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consAddress' is not null or undefined
            assertParamExists('signingInfo', 'consAddress', consAddress)
            const localVarPath = `/cosmos/slashing/v1beta1/signing_infos/{cons_address}`
                .replace(`{${"cons_address"}}`, encodeURIComponent(String(consAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfos: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/slashing/v1beta1/signing_infos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/slashing/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorValidators: async (delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('stakingDelegatorValidators', 'delegatorAddr', delegatorAddr)
            const localVarPath = `/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators`
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParams: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/staking/v1beta1/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyOf: async (denom: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'denom' is not null or undefined
            assertParamExists('supplyOf', 'denom', denom)
            const localVarPath = `/cosmos/bank/v1beta1/supply/{denom}`
                .replace(`{${"denom"}}`, encodeURIComponent(String(denom)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tallyResult: async (proposalId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('tallyResult', 'proposalId', proposalId)
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/tally`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/bank/v1beta1/supply`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbondingDelegation: async (validatorAddr: string, delegatorAddr: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('unbondingDelegation', 'validatorAddr', validatorAddr)
            // verify required parameter 'delegatorAddr' is not null or undefined
            assertParamExists('unbondingDelegation', 'delegatorAddr', delegatorAddr)
            const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation`
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)))
                .replace(`{${"delegator_addr"}}`, encodeURIComponent(String(delegatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradedConsensusState: async (lastHeight: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lastHeight' is not null or undefined
            assertParamExists('upgradedConsensusState', 'lastHeight', lastHeight)
            const localVarPath = `/cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}`
                .replace(`{${"last_height"}}`, encodeURIComponent(String(lastHeight)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validator: async (validatorAddr: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('validator', 'validatorAddr', validatorAddr)
            const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}`
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorCommission: async (validatorAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validatorAddress' is not null or undefined
            assertParamExists('validatorCommission', 'validatorAddress', validatorAddress)
            const localVarPath = `/cosmos/distribution/v1beta1/validators/{validator_address}/commission`
                .replace(`{${"validator_address"}}`, encodeURIComponent(String(validatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDelegations: async (validatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('validatorDelegations', 'validatorAddr', validatorAddr)
            const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/delegations`
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorOutstandingRewards: async (validatorAddress: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validatorAddress' is not null or undefined
            assertParamExists('validatorOutstandingRewards', 'validatorAddress', validatorAddress)
            const localVarPath = `/cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards`
                .replace(`{${"validator_address"}}`, encodeURIComponent(String(validatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorSlashes: async (validatorAddress: string, startingHeight?: string, endingHeight?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validatorAddress' is not null or undefined
            assertParamExists('validatorSlashes', 'validatorAddress', validatorAddress)
            const localVarPath = `/cosmos/distribution/v1beta1/validators/{validator_address}/slashes`
                .replace(`{${"validator_address"}}`, encodeURIComponent(String(validatorAddress)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startingHeight !== undefined) {
                localVarQueryParameter['starting_height'] = startingHeight;
            }

            if (endingHeight !== undefined) {
                localVarQueryParameter['ending_height'] = endingHeight;
            }

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorUnbondingDelegations: async (validatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'validatorAddr' is not null or undefined
            assertParamExists('validatorUnbondingDelegations', 'validatorAddr', validatorAddr)
            const localVarPath = `/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations`
                .replace(`{${"validator_addr"}}`, encodeURIComponent(String(validatorAddr)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validators: async (status?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/staking/v1beta1/validators`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the oter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote: async (proposalId: string, voter: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('vote', 'proposalId', proposalId)
            // verify required parameter 'voter' is not null or undefined
            assertParamExists('vote', 'voter', voter)
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)))
                .replace(`{${"voter"}}`, encodeURIComponent(String(voter)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votes: async (proposalId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'proposalId' is not null or undefined
            assertParamExists('votes', 'proposalId', proposalId)
            const localVarPath = `/cosmos/gov/v1beta1/proposals/{proposal_id}/votes`
                .replace(`{${"proposal_id"}}`, encodeURIComponent(String(proposalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async account(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.account(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Accounts returns all the existing accounts
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async accounts(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allBalances(address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allEvidence(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20024>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allowance(granter: string, grantee: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20056>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allowance(granter, grantee, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allowances(grantee: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20057>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async annualProvisions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20034>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.annualProvisions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appliedPlan(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20051>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appliedPlan(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async balance(address: string, denom: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.balance(address, denom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async bankParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.bankParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async communityPool(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20016>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.communityPool(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentPlan(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20052>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentPlan(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegation(validatorAddr: string, delegatorAddr: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20046>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegation(validatorAddr, delegatorAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegationRewards(delegatorAddress: string, validatorAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20018>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegationRewards(delegatorAddress, validatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegationTotalRewards(delegatorAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20017>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegationTotalRewards(delegatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegatorDelegations(delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20038>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegatorUnbondingDelegations(delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20040>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegatorValidator(delegatorAddr: string, validatorAddr: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20042>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegatorValidator(delegatorAddr, validatorAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegatorValidators(delegatorAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20019>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegatorValidators(delegatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delegatorWithdrawAddress(delegatorAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20020>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delegatorWithdrawAddress(delegatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denomMetadata(denom: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.denomMetadata(denom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denomOwners(denom: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async denomsMetadata(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deposit(proposalId: string, depositor: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20030>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deposit(proposalId, depositor, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deposits(proposalId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20029>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async distributionParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20021>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.distributionParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async evidence(evidenceHash: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20025>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.evidence(evidenceHash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async govParams(paramsType: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20026>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.govParams(paramsType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter] 
         * @param {string} [grantee] 
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async grants(granter?: string, grantee?: string, msgTypeUrl?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20055>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async historicalInfo(height: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20043>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.historicalInfo(height, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inflation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20035>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inflation(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mintParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20036>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mintParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async moduleVersions(moduleName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20053>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.moduleVersions(moduleName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async params(subspace?: string, key?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20037>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.params(subspace, key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pool(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20045>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pool(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proposal(proposalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20028>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proposal(proposalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Proposals queries all proposals based on given status.
         * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async proposals(proposalStatus?: 'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED', voter?: string, depositor?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20027>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async redelegations(delegatorAddr: string, srcValidatorAddr?: string, dstValidatorAddr?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20039>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signingInfo(consAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signingInfo(consAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signingInfos(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async slashingParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.slashingParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stakingDelegatorValidators(delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20041>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async stakingParams(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20044>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.stakingParams(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async supplyOf(denom: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.supplyOf(denom, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tallyResult(proposalId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20031>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tallyResult(proposalId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async totalSupply(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async unbondingDelegation(validatorAddr: string, delegatorAddr: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20047>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.unbondingDelegation(validatorAddr, delegatorAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async upgradedConsensusState(lastHeight: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20054>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.upgradedConsensusState(lastHeight, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validator(validatorAddr: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validator(validatorAddr, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorCommission(validatorAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorCommission(validatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorDelegations(validatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorOutstandingRewards(validatorAddress: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20022>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorOutstandingRewards(validatorAddress, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorSlashes(validatorAddress: string, startingHeight?: string, endingHeight?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20023>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validatorUnbondingDelegations(validatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20048>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validators(status?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the oter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async vote(proposalId: string, voter: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20033>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.vote(proposalId, voter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async votes(proposalId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20032>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueryApiFp(configuration)
    return {
        /**
         * 
         * @summary Account returns account details based on address.
         * @param {string} address address defines the address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        account(address: string, options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.account(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Accounts returns all the existing accounts
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        accounts(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary AllBalances queries the balance of all coins for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allBalances(address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary AllEvidence queries all evidence.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allEvidence(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20024> {
            return localVarFp.allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Allowance returns fee granted to the grantee by the granter.
         * @param {string} granter granter is the address of the user granting an allowance of their funds.
         * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowance(granter: string, grantee: string, options?: any): AxiosPromise<InlineResponse20056> {
            return localVarFp.allowance(granter, grantee, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Allowances returns all the grants for address.
         * @param {string} grantee 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allowances(grantee: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20057> {
            return localVarFp.allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary AnnualProvisions current minting annual provisions value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        annualProvisions(options?: any): AxiosPromise<InlineResponse20034> {
            return localVarFp.annualProvisions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary AppliedPlan queries a previously applied upgrade plan by its name.
         * @param {string} name name is the name of the applied plan to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appliedPlan(name: string, options?: any): AxiosPromise<InlineResponse20051> {
            return localVarFp.appliedPlan(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Params queries all parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authParams(options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.authParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Balance queries the balance of a single coin for a single account.
         * @param {string} address address is the address to query balances for.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        balance(address: string, denom: string, options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.balance(address, denom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Params queries the parameters of x/bank module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bankParams(options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.bankParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CommunityPool queries the community pool coins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        communityPool(options?: any): AxiosPromise<InlineResponse20016> {
            return localVarFp.communityPool(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary CurrentPlan queries the current upgrade plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentPlan(options?: any): AxiosPromise<InlineResponse20052> {
            return localVarFp.currentPlan(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delegation queries delegate info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegation(validatorAddr: string, delegatorAddr: string, options?: any): AxiosPromise<InlineResponse20046> {
            return localVarFp.delegation(validatorAddr, delegatorAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DelegationRewards queries the total rewards accrued by a delegation.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationRewards(delegatorAddress: string, validatorAddress: string, options?: any): AxiosPromise<InlineResponse20018> {
            return localVarFp.delegationRewards(delegatorAddress, validatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegationTotalRewards(delegatorAddress: string, options?: any): AxiosPromise<InlineResponse20017> {
            return localVarFp.delegationTotalRewards(delegatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DelegatorDelegations queries all delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorDelegations(delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20038> {
            return localVarFp.delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorUnbondingDelegations(delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20040> {
            return localVarFp.delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DelegatorValidator queries validator info for given delegator validator pair.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidator(delegatorAddr: string, validatorAddr: string, options?: any): AxiosPromise<InlineResponse20042> {
            return localVarFp.delegatorValidator(delegatorAddr, validatorAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DelegatorValidators queries the validators of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorValidators(delegatorAddress: string, options?: any): AxiosPromise<InlineResponse20019> {
            return localVarFp.delegatorValidators(delegatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
         * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delegatorWithdrawAddress(delegatorAddress: string, options?: any): AxiosPromise<InlineResponse20020> {
            return localVarFp.delegatorWithdrawAddress(delegatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DenomsMetadata queries the client metadata of a given coin denomination.
         * @param {string} denom denom is the coin denom to query the metadata for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomMetadata(denom: string, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.denomMetadata(denom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DenomOwners queries for all account addresses that own a particular token denomination.
         * @param {string} denom denom defines the coin denomination to query all account holders for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomOwners(denom: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        denomsMetadata(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deposit queries single deposit information based proposalID, depositAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} depositor depositor defines the deposit addresses from the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposit(proposalId: string, depositor: string, options?: any): AxiosPromise<InlineResponse20030> {
            return localVarFp.deposit(proposalId, depositor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deposits queries all deposits of a single proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deposits(proposalId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20029> {
            return localVarFp.deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Params queries params of the distribution module.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionParams(options?: any): AxiosPromise<InlineResponse20021> {
            return localVarFp.distributionParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Evidence queries evidence based on evidence hash.
         * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        evidence(evidenceHash: string, options?: any): AxiosPromise<InlineResponse20025> {
            return localVarFp.evidence(evidenceHash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Params queries all parameters of the gov module.
         * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        govParams(paramsType: string, options?: any): AxiosPromise<InlineResponse20026> {
            return localVarFp.govParams(paramsType, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns list of `Authorization`, granted to the grantee by the granter.
         * @param {string} [granter] 
         * @param {string} [grantee] 
         * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        grants(granter?: string, grantee?: string, msgTypeUrl?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20055> {
            return localVarFp.grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary HistoricalInfo queries the historical info for given height.
         * @param {string} height height defines at which height to query the historical info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        historicalInfo(height: string, options?: any): AxiosPromise<InlineResponse20043> {
            return localVarFp.historicalInfo(height, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Inflation returns the current minting inflation value.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inflation(options?: any): AxiosPromise<InlineResponse20035> {
            return localVarFp.inflation(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Params returns the total set of minting parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mintParams(options?: any): AxiosPromise<InlineResponse20036> {
            return localVarFp.mintParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ModuleVersions queries the list of module versions from state.
         * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        moduleVersions(moduleName?: string, options?: any): AxiosPromise<InlineResponse20053> {
            return localVarFp.moduleVersions(moduleName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Params queries a specific parameter of a module, given its subspace and key.
         * @param {string} [subspace] subspace defines the module to query the parameter for.
         * @param {string} [key] key defines the key of the parameter in the subspace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        params(subspace?: string, key?: string, options?: any): AxiosPromise<InlineResponse20037> {
            return localVarFp.params(subspace, key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Pool queries the pool info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pool(options?: any): AxiosPromise<InlineResponse20045> {
            return localVarFp.pool(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Proposal queries proposal details based on ProposalID.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposal(proposalId: string, options?: any): AxiosPromise<InlineResponse20028> {
            return localVarFp.proposal(proposalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Proposals queries all proposals based on given status.
         * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
         * @param {string} [voter] voter defines the voter address for the proposals.
         * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        proposals(proposalStatus?: 'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED', voter?: string, depositor?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20027> {
            return localVarFp.proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Redelegations queries redelegations of given address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
         * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        redelegations(delegatorAddr: string, srcValidatorAddr?: string, dstValidatorAddr?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20039> {
            return localVarFp.redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SigningInfo queries the signing info of given cons address
         * @param {string} consAddress cons_address is the address to query signing info of
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfo(consAddress: string, options?: any): AxiosPromise<QuerySigningInfoResponseIsTheResponseTypeForTheQuerySigningInfoRPCMethod> {
            return localVarFp.signingInfo(consAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SigningInfos queries signing info of all validators
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signingInfos(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<QuerySigningInfosResponseIsTheResponseTypeForTheQuerySigningInfosRPCMethod> {
            return localVarFp.signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Params queries the parameters of slashing module
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        slashingParams(options?: any): AxiosPromise<QueryParamsResponseIsTheResponseTypeForTheQueryParamsRPCMethod> {
            return localVarFp.slashingParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary DelegatorValidators queries all validators info for given delegator address.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingDelegatorValidators(delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20041> {
            return localVarFp.stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Parameters queries the staking parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakingParams(options?: any): AxiosPromise<InlineResponse20044> {
            return localVarFp.stakingParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SupplyOf queries the supply of a single coin.
         * @param {string} denom denom is the coin denom to query balances for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        supplyOf(denom: string, options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.supplyOf(denom, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary TallyResult queries the tally of a proposal vote.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tallyResult(proposalId: string, options?: any): AxiosPromise<InlineResponse20031> {
            return localVarFp.tallyResult(proposalId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary TotalSupply queries the total supply of all coins.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        totalSupply(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<QueryTotalSupplyResponseIsTheResponseTypeForTheQueryTotalSupplyRPCMethod> {
            return localVarFp.totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        unbondingDelegation(validatorAddr: string, delegatorAddr: string, options?: any): AxiosPromise<InlineResponse20047> {
            return localVarFp.unbondingDelegation(validatorAddr, delegatorAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
         * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        upgradedConsensusState(lastHeight: string, options?: any): AxiosPromise<InlineResponse20054> {
            return localVarFp.upgradedConsensusState(lastHeight, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validator queries validator info for given validator address.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validator(validatorAddr: string, options?: any): AxiosPromise<QueryValidatorResponseIsResponseTypeForTheQueryValidatorRPCMethod> {
            return localVarFp.validator(validatorAddr, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ValidatorCommission queries accumulated commission for a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorCommission(validatorAddress: string, options?: any): AxiosPromise<QueryValidatorCommissionResponseIsTheResponseTypeForTheQueryValidatorCommissionRPCMethod> {
            return localVarFp.validatorCommission(validatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ValidatorDelegations queries delegate info for given validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorDelegations(validatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<QueryValidatorDelegationsResponseIsResponseTypeForTheQueryValidatorDelegationsRPCMethod> {
            return localVarFp.validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ValidatorOutstandingRewards queries rewards of a validator address.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorOutstandingRewards(validatorAddress: string, options?: any): AxiosPromise<InlineResponse20022> {
            return localVarFp.validatorOutstandingRewards(validatorAddress, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ValidatorSlashes queries slash events of a validator.
         * @param {string} validatorAddress validator_address defines the validator address to query for.
         * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
         * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorSlashes(validatorAddress: string, startingHeight?: string, endingHeight?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20023> {
            return localVarFp.validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
         * @param {string} validatorAddr validator_addr defines the validator address to query for.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validatorUnbondingDelegations(validatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20048> {
            return localVarFp.validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Validators queries all validators that match the given status.
         * @param {string} [status] status enables to query for validators matching a given status.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validators(status?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<QueryValidatorsResponseIsResponseTypeForTheQueryValidatorsRPCMethod> {
            return localVarFp.validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Vote queries voted information based on proposalID, voterAddr.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} voter voter defines the oter address for the proposals.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        vote(proposalId: string, voter: string, options?: any): AxiosPromise<InlineResponse20033> {
            return localVarFp.vote(proposalId, voter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Votes queries votes of a given proposal.
         * @param {string} proposalId proposal_id defines the unique id of the proposal.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        votes(proposalId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20032> {
            return localVarFp.votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
    /**
     * 
     * @summary Account returns account details based on address.
     * @param {string} address address defines the address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public account(address: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).account(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Accounts returns all the existing accounts
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public accounts(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).accounts(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary AllBalances queries the balance of all coins for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public allBalances(address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).allBalances(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary AllEvidence queries all evidence.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public allEvidence(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).allEvidence(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Allowance returns fee granted to the grantee by the granter.
     * @param {string} granter granter is the address of the user granting an allowance of their funds.
     * @param {string} grantee grantee is the address of the user being granted an allowance of another user\&#39;s funds.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public allowance(granter: string, grantee: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).allowance(granter, grantee, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Allowances returns all the grants for address.
     * @param {string} grantee 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public allowances(grantee: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).allowances(grantee, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary AnnualProvisions current minting annual provisions value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public annualProvisions(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).annualProvisions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary AppliedPlan queries a previously applied upgrade plan by its name.
     * @param {string} name name is the name of the applied plan to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public appliedPlan(name: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).appliedPlan(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Params queries all parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public authParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).authParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Balance queries the balance of a single coin for a single account.
     * @param {string} address address is the address to query balances for.
     * @param {string} denom denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public balance(address: string, denom: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).balance(address, denom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Params queries the parameters of x/bank module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public bankParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).bankParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CommunityPool queries the community pool coins.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public communityPool(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).communityPool(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary CurrentPlan queries the current upgrade plan.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public currentPlan(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).currentPlan(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delegation queries delegate info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public delegation(validatorAddr: string, delegatorAddr: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).delegation(validatorAddr, delegatorAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DelegationRewards queries the total rewards accrued by a delegation.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public delegationRewards(delegatorAddress: string, validatorAddress: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).delegationRewards(delegatorAddress, validatorAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DelegationTotalRewards queries the total rewards accrued by a each validator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public delegationTotalRewards(delegatorAddress: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).delegationTotalRewards(delegatorAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DelegatorDelegations queries all delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public delegatorDelegations(delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).delegatorDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DelegatorUnbondingDelegations queries all unbonding delegations of a given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public delegatorUnbondingDelegations(delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).delegatorUnbondingDelegations(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DelegatorValidator queries validator info for given delegator validator pair.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public delegatorValidator(delegatorAddr: string, validatorAddr: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).delegatorValidator(delegatorAddr, validatorAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DelegatorValidators queries the validators of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public delegatorValidators(delegatorAddress: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).delegatorValidators(delegatorAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DelegatorWithdrawAddress queries withdraw address of a delegator.
     * @param {string} delegatorAddress delegator_address defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public delegatorWithdrawAddress(delegatorAddress: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).delegatorWithdrawAddress(delegatorAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DenomsMetadata queries the client metadata of a given coin denomination.
     * @param {string} denom denom is the coin denom to query the metadata for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public denomMetadata(denom: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).denomMetadata(denom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DenomOwners queries for all account addresses that own a particular token denomination.
     * @param {string} denom denom defines the coin denomination to query all account holders for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public denomOwners(denom: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).denomOwners(denom, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DenomsMetadata queries the client metadata for all registered coin denominations.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public denomsMetadata(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).denomsMetadata(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deposit queries single deposit information based proposalID, depositAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} depositor depositor defines the deposit addresses from the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public deposit(proposalId: string, depositor: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).deposit(proposalId, depositor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deposits queries all deposits of a single proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public deposits(proposalId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).deposits(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Params queries params of the distribution module.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public distributionParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).distributionParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Evidence queries evidence based on evidence hash.
     * @param {string} evidenceHash evidence_hash defines the hash of the requested evidence.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public evidence(evidenceHash: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).evidence(evidenceHash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Params queries all parameters of the gov module.
     * @param {string} paramsType params_type defines which parameters to query for, can be one of \&quot;voting\&quot;, \&quot;tallying\&quot; or \&quot;deposit\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public govParams(paramsType: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).govParams(paramsType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns list of `Authorization`, granted to the grantee by the granter.
     * @param {string} [granter] 
     * @param {string} [grantee] 
     * @param {string} [msgTypeUrl] Optional, msg_type_url, when set, will query only grants matching given msg type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public grants(granter?: string, grantee?: string, msgTypeUrl?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).grants(granter, grantee, msgTypeUrl, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary HistoricalInfo queries the historical info for given height.
     * @param {string} height height defines at which height to query the historical info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public historicalInfo(height: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).historicalInfo(height, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Inflation returns the current minting inflation value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public inflation(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).inflation(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Params returns the total set of minting parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public mintParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).mintParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ModuleVersions queries the list of module versions from state.
     * @param {string} [moduleName] module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public moduleVersions(moduleName?: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).moduleVersions(moduleName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Params queries a specific parameter of a module, given its subspace and key.
     * @param {string} [subspace] subspace defines the module to query the parameter for.
     * @param {string} [key] key defines the key of the parameter in the subspace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public params(subspace?: string, key?: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).params(subspace, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Pool queries the pool info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public pool(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).pool(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Proposal queries proposal details based on ProposalID.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public proposal(proposalId: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).proposal(proposalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Proposals queries all proposals based on given status.
     * @param {'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED'} [proposalStatus] proposal_status defines the status of the proposals.   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.  - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit period.  - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting period.  - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has passed.  - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has been rejected.  - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has failed.
     * @param {string} [voter] voter defines the voter address for the proposals.
     * @param {string} [depositor] depositor defines the deposit addresses from the proposals.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public proposals(proposalStatus?: 'PROPOSAL_STATUS_UNSPECIFIED' | 'PROPOSAL_STATUS_DEPOSIT_PERIOD' | 'PROPOSAL_STATUS_VOTING_PERIOD' | 'PROPOSAL_STATUS_PASSED' | 'PROPOSAL_STATUS_REJECTED' | 'PROPOSAL_STATUS_FAILED', voter?: string, depositor?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).proposals(proposalStatus, voter, depositor, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Redelegations queries redelegations of given address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [srcValidatorAddr] src_validator_addr defines the validator address to redelegate from.
     * @param {string} [dstValidatorAddr] dst_validator_addr defines the validator address to redelegate to.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public redelegations(delegatorAddr: string, srcValidatorAddr?: string, dstValidatorAddr?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).redelegations(delegatorAddr, srcValidatorAddr, dstValidatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SigningInfo queries the signing info of given cons address
     * @param {string} consAddress cons_address is the address to query signing info of
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public signingInfo(consAddress: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).signingInfo(consAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SigningInfos queries signing info of all validators
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public signingInfos(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).signingInfos(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Params queries the parameters of slashing module
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public slashingParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).slashingParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary DelegatorValidators queries all validators info for given delegator address.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public stakingDelegatorValidators(delegatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).stakingDelegatorValidators(delegatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Parameters queries the staking parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public stakingParams(options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).stakingParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SupplyOf queries the supply of a single coin.
     * @param {string} denom denom is the coin denom to query balances for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public supplyOf(denom: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).supplyOf(denom, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary TallyResult queries the tally of a proposal vote.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public tallyResult(proposalId: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).tallyResult(proposalId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary TotalSupply queries the total supply of all coins.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public totalSupply(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).totalSupply(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UnbondingDelegation queries unbonding info for given validator delegator pair.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} delegatorAddr delegator_addr defines the delegator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public unbondingDelegation(validatorAddr: string, delegatorAddr: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).unbondingDelegation(validatorAddr, delegatorAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary UpgradedConsensusState queries the consensus state that will serve as a trusted kernel for the next version of this chain. It will only be stored at the last height of this chain. UpgradedConsensusState RPC not supported with legacy querier
     * @param {string} lastHeight last height of the current chain must be sent in request as this is the height under which next consensus state is stored
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public upgradedConsensusState(lastHeight: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).upgradedConsensusState(lastHeight, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validator queries validator info for given validator address.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public validator(validatorAddr: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).validator(validatorAddr, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ValidatorCommission queries accumulated commission for a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public validatorCommission(validatorAddress: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).validatorCommission(validatorAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ValidatorDelegations queries delegate info for given validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public validatorDelegations(validatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).validatorDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ValidatorOutstandingRewards queries rewards of a validator address.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public validatorOutstandingRewards(validatorAddress: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).validatorOutstandingRewards(validatorAddress, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ValidatorSlashes queries slash events of a validator.
     * @param {string} validatorAddress validator_address defines the validator address to query for.
     * @param {string} [startingHeight] starting_height defines the optional starting height to query the slashes.
     * @param {string} [endingHeight] starting_height defines the optional ending height to query the slashes.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public validatorSlashes(validatorAddress: string, startingHeight?: string, endingHeight?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).validatorSlashes(validatorAddress, startingHeight, endingHeight, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ValidatorUnbondingDelegations queries unbonding delegations of a validator.
     * @param {string} validatorAddr validator_addr defines the validator address to query for.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public validatorUnbondingDelegations(validatorAddr: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).validatorUnbondingDelegations(validatorAddr, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Validators queries all validators that match the given status.
     * @param {string} [status] status enables to query for validators matching a given status.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public validators(status?: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).validators(status, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Vote queries voted information based on proposalID, voterAddr.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} voter voter defines the oter address for the proposals.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public vote(proposalId: string, voter: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).vote(proposalId, voter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Votes queries votes of a given proposal.
     * @param {string} proposalId proposal_id defines the unique id of the proposal.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public votes(proposalId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).votes(proposalId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ServiceApi - axios parameter creator
 * @export
 */
export const ServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary BroadcastTx broadcast transaction.
         * @param {InlineObject} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTx: async (body: InlineObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('broadcastTx', 'body', body)
            const localVarPath = `/cosmos/tx/v1beta1/txs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight: async (height: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'height' is not null or undefined
            assertParamExists('getBlockByHeight', 'height', height)
            const localVarPath = `/cosmos/base/tendermint/v1beta1/blocks/{height}`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/base/tendermint/v1beta1/blocks/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestValidatorSet: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/base/tendermint/v1beta1/validatorsets/latest`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/base/tendermint/v1beta1/node_info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/base/tendermint/v1beta1/syncing`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx: async (hash: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hash' is not null or undefined
            assertParamExists('getTx', 'hash', hash)
            const localVarPath = `/cosmos/tx/v1beta1/txs/{hash}`
                .replace(`{${"hash"}}`, encodeURIComponent(String(hash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC'} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxsEvent: async (events?: Array<string>, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, orderBy?: 'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmos/tx/v1beta1/txs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (events) {
                localVarQueryParameter['events'] = events;
            }

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidatorSetByHeight: async (height: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'height' is not null or undefined
            assertParamExists('getValidatorSetByHeight', 'height', height)
            const localVarPath = `/cosmos/base/tendermint/v1beta1/validatorsets/{height}`
                .replace(`{${"height"}}`, encodeURIComponent(String(height)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulate: async (body: CosmosTxV1beta1SimulateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('simulate', 'body', body)
            const localVarPath = `/cosmos/tx/v1beta1/simulate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary BroadcastTx broadcast transaction.
         * @param {InlineObject} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async broadcastTx(body: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20050>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastTx(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBlockByHeight(height: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20011>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBlockByHeight(height, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestBlock(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20010>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestBlock(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLatestValidatorSet(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20014>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNodeInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20012>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNodeInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSyncing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20013>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSyncing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTx(hash: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CosmosTxV1beta1GetTxResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTx(hash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC'} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTxsEvent(events?: Array<string>, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, orderBy?: 'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CosmosTxV1beta1GetTxsEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getValidatorSetByHeight(height: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20015>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async simulate(body: CosmosTxV1beta1SimulateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20049>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.simulate(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceApiFp(configuration)
    return {
        /**
         * 
         * @summary BroadcastTx broadcast transaction.
         * @param {InlineObject} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastTx(body: InlineObject, options?: any): AxiosPromise<InlineResponse20050> {
            return localVarFp.broadcastTx(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetBlockByHeight queries block for given height.
         * @param {string} height 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBlockByHeight(height: string, options?: any): AxiosPromise<InlineResponse20011> {
            return localVarFp.getBlockByHeight(height, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetLatestBlock returns the latest block.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestBlock(options?: any): AxiosPromise<InlineResponse20010> {
            return localVarFp.getLatestBlock(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetLatestValidatorSet queries latest validator-set.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLatestValidatorSet(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20014> {
            return localVarFp.getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetNodeInfo queries the current node info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNodeInfo(options?: any): AxiosPromise<InlineResponse20012> {
            return localVarFp.getNodeInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetSyncing queries node syncing.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSyncing(options?: any): AxiosPromise<InlineResponse20013> {
            return localVarFp.getSyncing(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetTx fetches a tx by hash.
         * @param {string} hash hash is the tx hash to query, encoded as a hex string.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTx(hash: string, options?: any): AxiosPromise<CosmosTxV1beta1GetTxResponse> {
            return localVarFp.getTx(hash, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetTxsEvent fetches txs by event.
         * @param {Array<string>} [events] events is the list of transaction event type.
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC'} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxsEvent(events?: Array<string>, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, orderBy?: 'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC', options?: any): AxiosPromise<CosmosTxV1beta1GetTxsEventResponse> {
            return localVarFp.getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary GetValidatorSetByHeight queries validator-set at a given height.
         * @param {string} height 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getValidatorSetByHeight(height: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<InlineResponse20015> {
            return localVarFp.getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Simulate simulates executing a transaction for estimating gas usage.
         * @param {CosmosTxV1beta1SimulateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        simulate(body: CosmosTxV1beta1SimulateRequest, options?: any): AxiosPromise<InlineResponse20049> {
            return localVarFp.simulate(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI {
    /**
     * 
     * @summary BroadcastTx broadcast transaction.
     * @param {InlineObject} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public broadcastTx(body: InlineObject, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).broadcastTx(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetBlockByHeight queries block for given height.
     * @param {string} height 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getBlockByHeight(height: string, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getBlockByHeight(height, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetLatestBlock returns the latest block.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getLatestBlock(options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getLatestBlock(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetLatestValidatorSet queries latest validator-set.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getLatestValidatorSet(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getLatestValidatorSet(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetNodeInfo queries the current node info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getNodeInfo(options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getNodeInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetSyncing queries node syncing.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getSyncing(options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getSyncing(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetTx fetches a tx by hash.
     * @param {string} hash hash is the tx hash to query, encoded as a hex string.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getTx(hash: string, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getTx(hash, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetTxsEvent fetches txs by event.
     * @param {Array<string>} [events] events is the list of transaction event type.
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC'} [orderBy]  - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.  - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order  - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getTxsEvent(events?: Array<string>, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, orderBy?: 'ORDER_BY_UNSPECIFIED' | 'ORDER_BY_ASC' | 'ORDER_BY_DESC', options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getTxsEvent(events, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, orderBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary GetValidatorSetByHeight queries validator-set at a given height.
     * @param {string} height 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getValidatorSetByHeight(height: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).getValidatorSetByHeight(height, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Simulate simulates executing a transaction for estimating gas usage.
     * @param {CosmosTxV1beta1SimulateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public simulate(body: CosmosTxV1beta1SimulateRequest, options?: AxiosRequestConfig) {
        return ServiceApiFp(this.configuration).simulate(body, options).then((request) => request(this.axios, this.basePath));
    }
}


